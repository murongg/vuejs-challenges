{
  "challenges": [
    {
      "path": "1-hello-word",
      "quizLink": "https://sfc.vuejs.org/#eNpNjDsOwkAMRK9iuYKGFS1aItFxAxo3KHFgpf1Yu06aKHfHJE0qz+h53oIPkcs8Md7Qt74GUWisk3SUQ5JSFRaoPMIKYy0JCO2XkHJfclNI7QP3Pz8RPjnGAq9S40B4puzd7jOTFeUk8a1sDcAPYd6Cxe+1M4t3djfkdubdYYHrDzDkOR0=",
      "no": 1,
      "readme": {
        "en": "Hello, World!\n\nIn Vue.js Challenges, we use the Vue.js SFC Playground based on [vuejs/repl](https://github.com/vuejs/repl) to code online.\n\nFor this challenge, you will need to change the following code to make the page show \"Hello World\" correctly.\n\n```vue\n<script setup>\nimport { ref } from \"vue\"\nconst msg = ref(\"Hello World\")\n</script>\n\n<template>\n  <div>\n    <!-- The output of the page is expected to be Hello World -->\n    <h1>msg</h1>\n  </div>\n</template>\n\n```\n\nClick the `Take the Challenge` button to start coding! Happy Hacking!",
        "zh-CN": "Hello，World！\n\n在这个挑战中，我们使用基于 [vuejs/repl](https://github.com/vuejs/repl) 的`SFC`编码游乐场进行在线编码。\n\n对于这个挑战，您将需要更改以下代码，以使页面正确显示“Hello World”。\n\n```vue\n<script setup>\nimport { ref } from \"vue\"\nconst msg = ref(\"Hello World\")\n</script>\n\n<template>\n  <div>\n    <!-- 页面的期望输出是Hello World -->\n    <h1>msg</h1>\n  </div>\n</template>\n\n```\n\n\n点击上方的 `接受挑战` 开始编码！旅途愉快！"
      },
      "info": {
        "en": {
          "title": "Hello World",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          },
          "difficulty": "warm"
        },
        "zh-CN": {
          "title": "你好 !",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          }
        }
      }
    },
    {
      "path": "10-lifecycle",
      "quizLink": "https://sfc.vuejs.org/#eNqNUrtygzAQ/JWLKmdMwGk92JOMqxTpUqqxQThKhKQREi4Y/j2nB/hVxN3pdrVadhnIu9Z57xhZk7KrDNcWOmadBrGXxw0ltqNkSyVvtTIWBjCsyUAb1fOawQiNUS1QggKUzKzdNxf1BOVFOPo3PIXKSsnOQs87fhAMNl5xYY1jzxNkectMAqQTYgYq5aRNwAq3ycYCXforlGTx7hUULnkoDAhR2ThZWa4kWHU8CrZ4hoFKmCzl/V44b+zpakHlSGVZxIwwETxY1mqxtwxPAGXN+zDgGAPoX3iDCSYVSqCYcJ0GHA/OWnTyVgle/fq8g6WQeWQAfIVVSnWnMGPJ8JMmhSJKTNpFFC+L6KcsLlySjMxlPFq4kp8+OFZnwOUPq+xd67e9Rdq5lbv+ZkLqJpQyv7PAPjbbWElQmAs5cVmrU452P5BocH3Jhagf2culX40ZvK5W/lcZwxsP1neu5ybzNQxD+ooR/4b/8x7/AAjTI4w=",
      "no": 10,
      "readme": {
        "en": "For this challenge, you'll use the `Composition API: Lifecycle Hooks` to complete the challenge. \nHere's what you need to implement 👇: \n\n```vue\n// Child.vue\n\n<script setup lang=\"ts\">\nimport { onMounted, inject } from \"vue\"\n\nconst timer = inject('timer')\nconst count = inject('count')\n\n\nonMounted(() => {\n  // The timer will work abnormally when the child component is toggled. Lets fix it.\n  timer.value = window.setInterval(() => {\n    count.value++\n  }, 1000)\n})\n\n</script>\n\n<template>\n  <div>\n    <p>\n      Child Component: {{ count }}\n    </p>\n  </div>\n</template>\n\n```",
        "zh-CN": "在这个挑战中，你将使用 `组合式 API: 生命周期钩子` 来完成它。\n以下是你要实现的内容 👇: \n\n```vue\n// Child.vue\n\n<script setup lang=\"ts\">\nimport { onMounted, inject } from \"vue\"\n\nconst timer = inject('timer')\nconst count = inject('count')\n\n\nonMounted(() => {\n  // 切换子组件时, 定时器将不正常工作, 让我们来修复它 . \n  timer.value = window.setInterval(() => {\n    count.value++\n  }, 1000)\n})\n\n</script>\n\n<template>\n  <div>\n    <p>\n      Child Component: {{ count }}\n    </p>\n  </div>\n</template>\n\n```"
      },
      "info": {
        "en": {
          "title": "Lifecycle Hooks",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          },
          "difficulty": "easy",
          "tags": "Composition API,Lifecycle"
        },
        "zh-CN": {
          "title": "生命周期钩子",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          }
        }
      }
    },
    {
      "path": "11-next-dom-update",
      "quizLink": "https://sfc.vuejs.org/#eNpNUMtugzAQ/JWRTwmpoL1WUPV56KHqD/hCzCZBAdsy66QR4t+7hrTKxdbsjMezM6oX7/NTJPWoysGE1jMG4uiftG177wJjRKAdJuyC66GVaLXSVlvj7MAwLlpGlTSr+3Wa76I13DqL1ppAPVlerTFqi0Wbn+ou0maTpECRZelChvfvL7QDrGNciBF9UzM1dzi4M0xtcSb09ZEwxEDgQ81y0PxqTzz86a9mX0mZeBfZR8ZWUJDgwmbF8nOK7zrKO7dfbRpnYkqai9dHN4d+vXw2K63mzBS0WudMP/zmBKWFqwoPsu6kbVksvUljAph630kSQUC5jcypiaa6ccKz6VpzlNF/Q1rNemAcr41O4iwGxeIgbFncWKvpF/MXmCU=",
      "no": 11,
      "readme": {
        "en": "When you mutate a reactive state in `Vue.js`, the resulting DOM updates are not applied synchronously. \n\n`Vue.js` provides a utility for waiting for the next DOM update flush. Lets Go 👇: \n\n```vue\n<script setup>\nimport { ref } from \"vue\"\n\nconst count = ref(0)\n\nfunction increment() {\n  count.value++\n\n  /**\n   * DOM is not yet updated, how can we make sure that the DOM gets updated\n   * Make the output be true\n  */\n\n  console.log(+document.getElementById(\"counter\").textContent === 1)\n}\n</script>\n\n<template>\n  <button id=\"counter\" @click=\"increment\">\n    {{ count }}\n  </button>\n</template>\n\n\n```",
        "zh-CN": "在`Vue.js`中改变响应式状态时，DOM不会同步更新。 \n`Vue.js` 提供了一个用于等待下一次DOM更新的方法，让我们开始吧 👇: \n\n```vue\n<script setup>\nimport { ref } from \"vue\"\n\nconst count = ref(0)\n\nfunction increment() {\n  count.value++\n\n  /**\n   * DOM还未更新,如何确保DOM已经更新 ?\n   * 请保证以下输出为true\n  */\n\n  console.log(+document.getElementById(\"counter\").textContent === 1)\n}\n</script>\n\n<template>\n  <button id=\"counter\" @click=\"increment\">\n    {{ count }}\n  </button>\n</template>\n\n```"
      },
      "info": {
        "en": {
          "title": "Next DOM update flush",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          },
          "difficulty": "easy",
          "tags": "Global API:General"
        },
        "zh-CN": {
          "title": "下一次DOM更新",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          }
        }
      }
    },
    {
      "path": "12-optimize-perf-directive",
      "quizLink": "https://sfc.vuejs.org/#eNpNjTEOgzAQBL+ycgUiIqRFgJQyRX7gxkJHggKHZc40lv8eW6RIuavZnaDu1taHJ9Wqbh/dbAU7ibeD5nm1mxMEOJoQMblthVaJ1Uqz5nHjXTBungV9ZoqmzH2aP1jIHWYpihL9gKAZJ1in0lNVaY4X3JomL7rr6U3GFIRWuxihlIBut4aHp/kQZgHTQQ7j2/CLWoTwc8eYHjKXr/7mKn4BPe9M6A==",
      "no": 12,
      "readme": {
        "en": "`Vue.js` provides a directive that renders the element and the component only once, and skips future updates.\n\nDo you know what the directive is?. Lets try it 👇: \n\n```vue\n<script setup>\nimport { ref } from \"vue\"\n\nconst count = ref(0)\n\nsetInterval(() => {\n  count.value++\n}, 1000)\n</script>\n\n<template>\n  <span>Make it not to change: {{ count }}</span>\n</template>\n\n```",
        "zh-CN": "`Vue.js` 提供了一个指令，以便只渲染一次元素和组件，并且跳过以后的更新。\n\n你知道它是什么吗 ? 让我们试试👇:\n\n```vue\n<script setup>\nimport { ref } from \"vue\"\n\nconst count = ref(0)\n\nsetInterval(() => {\n  count.value++\n}, 1000)\n</script>\n\n<template>\n  <span>使它从不更新: {{ count }}</span>\n</template>\n\n```"
      },
      "info": {
        "en": {
          "title": "Optimize performance directive",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          },
          "difficulty": "medium",
          "tags": "Directives,Built-ins"
        },
        "zh-CN": {
          "title": "优化性能的指令",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          }
        }
      }
    },
    {
      "path": "13-dom-portal",
      "quizLink": "https://sfc.vuejs.org/#eNpNjbsOwjAUQ3/FZA/sKFRiY2ZhydDSXGilvJTcIqEo/07TLoyWfXyKuMZ4/CwkzkLlMc2RkYmX2Gmv/Rh8Zrj8xgVa3MjagEdI1mjRanXaiW2rmFy0A9OaAHWQEnfyhlLGzOCAAeM0WwOy5Mgzwgs8EfpnMN8eUu5cjoPvStmkta6Glpvq717UH8iwP00=",
      "no": 13,
      "readme": {
        "en": "`Vue.js` provides a built-in component that renders its slot content to another part of the `DOM`. \n\nDo you know the built-in component?. Lets try it 👇: \n\n```vue\n<script setup>\n\nconst msg = \"Hello World\"\n\n</script>\n\n<template>\n  <!-- Renders it to a child element of the `body` -->\n  <span>{{ msg }}</span>\n</template>\n\n\n```",
        "zh-CN": "`Vue.js`提供了一个内置组件，将其插槽内容渲染到另一个DOM，成为该DOM的一部分。\n\n你知道它是什么吗 ? 让我们试试👇:\n\n```vue\n<script setup>\n\nconst msg = \"Hello World\"\n\n</script>\n\n<template>\n  <!-- 将以下元素渲染成`body`的子元素 -->\n  <span>{{ msg }}</span>\n</template>\n\n\n```"
      },
      "info": {
        "en": {
          "title": "DOM Portal",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          },
          "difficulty": "easy",
          "tags": "Components,Built-ins"
        },
        "zh-CN": {
          "title": "DOM传送门",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          }
        }
      }
    },
    {
      "path": "14-dynamic-css-values",
      "quizLink": "https://sfc.vuejs.org/#eNpNUEFuhDAM/IqVE6AVUKmnFYvUYw/7gk0PLDEFKcRRErZCiL/XSVSpN3vsGc/4EB/W1q8NxVV0fnSLDeAxbLaXZlktuQAHOJzghMnRClLwrhTSjGR8gDDjinCLG4UUDpUUpTR/05E0Oc/jhxRPHXkXFthRa/rJdWLE4tshGim+Ipnvf5qA7jXooijh1sMhDeRbNYNbvJi1H/chzPWkiVyRSjcYRSuzKngvWe28wFvbtslU1+SAHI2bgKvVQ0DuADrbz9FW18TgXfNvyK0Pu0bwI1lUjDQV3Ekt0x4tsRGFEAiei1EJULsZ1mXMDqFqpLE5QAKu/CvFvpKdqMuC4vwFPjyGKQ==",
      "no": 14,
      "readme": {
        "en": "SFC `<style>` tags support linking CSS values to dynamic components.\n\nDo you know what it is?. Lets try it 👇: \n\n```vue\n<script setup>\nimport { ref } from \"vue\"\nconst theme = ref(\"red\")\n\nconst colors = [\"blue\", \"yellow\", \"red\", \"green\"]\n\nsetInterval(() => {\n  theme.value = colors[Math.floor(Math.random() * 4)]\n}, 1000)\n\n</script>\n\n<template>\n  <p>hello</p>\n</template>\n\n<style scoped>\n/* Modify the code to bind the dynamic color */\np {\n  color: red\n}\n</style>\n\n```",
        "zh-CN": "`Vue`单文件组件 `<style>` 模块支持给CSS绑定动态值。\n\n你知道它是什么吗 ? 让我们试试👇:\n\n```vue\n<script setup>\nimport { ref } from \"vue\"\nconst theme = ref(\"red\")\n\nconst colors = [\"blue\", \"yellow\", \"red\", \"green\"]\n\nsetInterval(() => {\n  theme.value = colors[Math.floor(Math.random() * 4)]\n}, 1000)\n\n</script>\n\n<template>\n  <p>hello</p>\n</template>\n\n<style scoped>\n/* 修改以下代码绑定动态颜色 */\np {\n  color: red\n}\n</style>\n\n```"
      },
      "info": {
        "en": {
          "title": "Dynamic css values",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          },
          "difficulty": "easy",
          "tags": "CSS Features"
        },
        "zh-CN": {
          "title": "动态CSS",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          }
        }
      }
    },
    {
      "path": "15-useToggle",
      "quizLink": "https://sfc.vuejs.org/#eNpNT81OhDAQfpUvveASI3dSVr1s4kE96M16qM0sEkrb0EFjCO9uKRuylzYz8/3O4jGEu5+JRC1kNGMXGJF4CrDatU3BsTgqp1xVlsqhxNMQLA3kGBrGD8FH/WUJ58kZ7rwDf2sG+7a1FNNAiKyZMvVZ95RXO/jXj31SGUcybP+UKyvl9uMU6T3r3BwwrxGW9THeRcZHVr29GH2iuUKftY10WLGy2grlApIpRU+sNAEyHN9WiRrzvEXEPYrXlwJ1+k6nAssiq3DB4sHYzvSNEpuhEvkAbJZ7R2wUWV15ieUfKuF7FA==",
      "no": 15,
      "readme": {
        "en": "For this challenge, we'll start by creating a composable function. Lets start with `useToggle` 👇: \n\n\n```vue\n<script setup lang='ts'>\n\n/**\n * Implement a composable function that toggles the state\n * Make the function work correctly\n*/\nfunction useToggle() {\n\n}\n\nconst [state, toggle] = useToggle(false)\n\n</script>\n\n<template>\n  <p>State: {{ state ? 'ON' : 'OFF' }}</p>\n  <p @click=\"toggle\">\n    Toggle state\n  </p>\n</template>\n\n```",
        "zh-CN": "这个挑战开始,我们将尝试编写可组合函数，让我们从`useToggle`开始 👇:\n\n```vue\n<script setup lang='ts'>\n\n/**\n * 实现一个切换状态的可组合函数\n * 确保该功能正常工作\n*/\nfunction useToggle() {\n\n}\n\nconst [state, toggle] = useToggle(false)\n\n</script>\n\n<template>\n  <p>State: {{ state ? 'ON' : 'OFF' }}</p>\n  <p @click=\"toggle\">\n    Toggle state\n  </p>\n</template>\n\n```"
      },
      "info": {
        "en": {
          "title": "useToggle",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          },
          "difficulty": "medium",
          "tags": "Composable Function"
        },
        "zh-CN": {
          "title": "切换器",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          }
        }
      }
    },
    {
      "path": "16-until",
      "quizLink": "https://sfc.vuejs.org/#eNpNkc9uwyAMxl/FyqVJWiWZepuSatuth70BF4TcDpUAAtNpqvruM6TZekL298N/Pt+qd++7a8LqtRqjCtoTRKTkwUh7njYUNwdh9exdILhBwBPc4RTcDKLiX6ISVljlbCRQLlmCKTP10OR837bCQgvH2RuckVX6QmBKGzglq0g7pto+s2u8yLW2mrQ0Ddy4wh8M5D6wvkqTsChZuy9P4KGDXXAo3O6hFkDGH6v+62irAsqI9aNBmb0rhXmDIafYhaMlDJysGZsOa+0ndrstPXbwMgx5ZQD5LTU9dihg05WZ90XNRjmDnXHnRV1bThPsG+h7+JQXhJgCFqtcIp8IdAQKbPayytgvd+K7cEDI5kpCjgBGD2/KaHWZRLWuKKoiARzXRAZ7z9mxf/pd3X8BOR2zCw==",
      "no": 16,
      "readme": {
        "en": "We always need to rely on the asynchronous return result in order to do something, and the `until` function is so useful in this scenario. Can you do it? Lets try it 👇:\n\n\n```vue\n<script setup lang='ts'>\nimport { ref } from \"vue\"\n\nconst count = ref(0)\n\n/**\n * Implement the until function\n*/\n\nfunction until(initial) {\n  function toBe(value) {\n\n  }\n\n  return {\n    toBe,\n  }\n}\n\nasync function increase() {\n  count.value = 0\n  setInterval(() => {\n    count.value++\n  }, 1000)\n  await until(count).toBe(3)\n  console.log(count.value === 3) // Make sure the output is true\n}\n\n</script>\n\n```",
        "zh-CN": "有些时候，我们需要依赖于异步的返回结果做一些后续处理，`until`函数在这种场景下非常有用，你能实现它吗 ? 让我们来试试吧 👇:\n\n\n```vue\n<script setup lang='ts'>\nimport { ref } from \"vue\"\n\nconst count = ref(0)\n\n/**\n * 实现`until`函数\n*/\n\nfunction until(initial) {\n  function toBe(value) {\n\n  }\n\n  return {\n    toBe,\n  }\n}\n\nasync function increase() {\n  count.value = 0\n  setInterval(() => {\n    count.value++\n  }, 1000)\n  await until(count).toBe(3)\n  console.log(count.value === 3) // 确保输出为true\n}\n\n</script>\n\n```"
      },
      "info": {
        "en": {
          "title": "until",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          },
          "difficulty": "medium",
          "tags": "Utility Function"
        },
        "zh-CN": {
          "title": "until",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          }
        }
      }
    },
    {
      "path": "17-useCounter",
      "quizLink": "https://sfc.vuejs.org/#eNqFUD1PwzAQ/SunLNCoImWNkgJiYkBMMHlxzRWsOo5ln/lQ5P/O2SlRkSqxRDm/j3vvpurOuauPiFVbdUF57QgCUnRgpH3rLyhcbIUVVltCv5cK4Tng/Rjz+ORIjzbAJCzAoO1NCzYOO/Rlll8nc8oeTV0zUsPD4AwOaAnoHUGNgxuD3BmEfbQqWxbWozwghOixsH4h+Bz9IbDIe1RkvoWtG2EXNC7hLrXVpKV5kSYi9LBZwzjnbc9U6GFKq1zkGFXxI8HEe5i2Bm3VGl6RPx75OpBYcLKKvad8gDZv4eItXG8grbJR18xHLUfsCLm6JOQJoHPbYtDCdFwEKXWNm8FdJOJCt8podehFxRFEVSDIcQqnmUnnBRx3EeT/fwWl2iKZp7+irjkpUKUffqLGcw==",
      "no": 17,
      "readme": {
        "en": "For this challenge, we're going to implement a counter. 👇: \n\n\n```vue\n<script setup lang='ts'>\n\ninterface UseCounterOptions {\n  min?: number\n  max?: number\n}\n\n/**\n * Implement the composable function\n * 1. inc (+)\n * 2. dec (-)\n * 3. reset \n * 4. min & max opotion support\n * Make sure the function works correctly\n*/\nfunction useCounter(initialValue = 0, options: UseCounterOptions = {}) {\n\n}\n\nconst { count, inc, dec, reset } = useCounter(0, { min: 0, max: 10 })\n\n</script>\n\n```",
        "zh-CN": "在这个挑战中，我们将实现一个计数器。 👇: \n\n\n```vue\n<script setup lang='ts'>\n\ninterface UseCounterOptions {\n  min?: number\n  max?: number\n}\n\n/**\n * 实现计数器函数,确保功能正常工作\n * 1. 加 (+)\n * 2. 减 (-)\n * 3. 重置 \n * 4. 最小值 & 最大值 选项支持\n*/\nfunction useCounter(initialValue = 0, options: UseCounterOptions = {}) {\n\n}\n\nconst { count, inc, dec, reset } = useCounter(0, { min: 0, max: 10 })\n\n</script>\n\n```"
      },
      "info": {
        "en": {
          "title": "useCounter",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          },
          "difficulty": "medium",
          "tags": "Composable Function"
        },
        "zh-CN": {
          "title": "计数器",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          }
        }
      }
    },
    {
      "path": "18-useLocalStorage",
      "quizLink": "https://sfc.vuejs.org/#eNqFkUFvwjAMhf+KlQtQIbpdK5jEcdJ2mrRdcgmdySJSp0ocUIX473NamNAuXP3e+/wsn9W271fHjKpR69RG1zMk5NyDN2Q3M06zF02aXNeHyHCGiHu4wD6GDrSSnFZFrqtKE1Tw2vUeOyQG/kFog6SS2XmEfaaWXRCruN7NASHliKPrJsEpxEOSUIzYsh80VbWmPzUnfAut8R8corE4P+DQQOLoyC7BkWNn/KfxGRswNCzgLKsERonhWMawKd3n985FqQ4y5hxpcmm6lOGUa0MmxijJ/8u1umpaLeFp5NQ1fMnJhsAig79zw24A6WktlrLjzWKRcDMtCh5XPtj5Fbkai9yYW/qG08Q1PoXynEdwsUzwgr9Dyh3PZbiup0fLY9XlF+VXuSw=",
      "no": 18,
      "readme": {
        "en": "We often need to use the `localStorage` API. A composable function will help us use it better. Lets go. 👇: \n\n\n```vue\n<script setup lang='ts'>\n\nimport { ref } from \"vue\"\n\n/**\n * Implement the composable function\n Make sure the function works correctly\n*/\nfunction useLocalStorage(key: string, initialValue: any) {\n  const value = ref(initialValue)\n\n  return value\n}\n\nconst counter = useLocalStorage(\"counter\", 0)\n\n// We can get the localStorage by triggering the getter:\nconsole.log(counter.value)\n\n// And we also can set the localStorage by triggering the setter:\n\ncounter.value = 1\n\n</script>\n\n```",
        "zh-CN": "我们经常需要使用`localStorage`API，一个好用的可组合函数封装将帮助我们更好地使用它，让我们开始吧 👇: \n\n\n```vue\n<script setup lang='ts'>\n\nimport { ref } from \"vue\"\n\n/**\n * 实现`useLocalStorage`函数\n*/\nfunction useLocalStorage(key: string, initialValue: any) {\n  const value = ref(initialValue)\n\n  return value\n}\n\nconst counter = useLocalStorage(\"counter\", 0)\n\n// 我们可以通过触发`counter`的`getter`来获取本地存储的值\nconsole.log(counter.value)\n\n// 同样地,我们也可以通过触发`counter`的`setter`来设置本地存储的值\n\ncounter.value = 1\n\n</script>\n\n```"
      },
      "info": {
        "en": {
          "title": "useLocalStorage",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          },
          "difficulty": "medium",
          "tags": "Composable Function"
        },
        "zh-CN": {
          "title": "实现本地存储函数",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          }
        }
      }
    },
    {
      "path": "19-v-focus",
      "quizLink": "https://sfc.vuejs.org/#eNpNUDFOxDAQ/MriJrkILhElSk6iQbqClspNyG1yFo5t2esAivJ31g7SXWNpdmfGM7uKV+eOS0TxItoweOUIAlJ0oHszdQWF4iSNmp31BCt4HGGD0dsZpGCVFNJIM1gTWEY9IXSJU469DnhIu7qqpIEKzrPTOKMhoCvCEAOxx0V5HEgtmCnv/RdCiB4zRRkXCfBfNFqWYKg/dfQBvq9oMqnInxagApCdJo2X5CRNVd9yfbwlLQdb02xLDzc8G0K/9LosD9Cd0g72BkcextTj4Q6y7hGem6bJndp6vxRfhgEhV2MmI4B2j7085cCdFNlECqBfhwwJf0gKprb1nU5sf6sriZM=",
      "no": 19,
      "readme": {
        "en": "For this challenge, we'll start by creating a custom directive. Lets start with `v-focus` 👇: \n\n```vue\n<script setup lang='ts'>\nimport { ref } from \"vue\"\n\nconst state = ref(false)\n\n/**\n * Implement the custom directive\n * Make sure the input element focuses/blurs when the 'state' is toggled\n *\n*/\n\nconst VFocus = {\n\n}\n\nsetInterval(() => {\n  state.value = !state.value\n}, 2000)\n\n</script>\n\n<template>\n  <input v-focus=\"state\" type=\"text\">\n</template>\n\n```",
        "zh-CN": "这个挑战开始，我们将尝试编写自定义指令，让我们从`v-focus`开始 👇:\n\n```vue\n<script setup lang='ts'>\nimport { ref } from \"vue\"\n\nconst state = ref(false)\n\n/**\n * 实现一个自定义指令,让元素获取焦点\n * 确保当切换`state`时,元素随着状态值获取/失去焦点\n *\n*/\nconst VFocus = {\n\n}\n\nsetInterval(() => {\n  state.value = !state.value\n}, 2000)\n\n</script>\n\n<template>\n  <input v-focus=\"state\" type=\"text\">\n</template>\n\n```"
      },
      "info": {
        "en": {
          "title": "v-focus",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          },
          "difficulty": "medium",
          "tags": "Directives"
        },
        "zh-CN": {
          "title": "切换焦点指令",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          }
        }
      }
    },
    {
      "path": "2-ref-family",
      "quizLink": "https://sfc.vuejs.org/#eNqFVE1v2zAM/SuET/lo7CbdyXC6DT3vMmw3HaoocqJFkQRJdlFk+e+jKceJuwW7GKQsvvf4IZ6yr87lbSOzMquC8MpFCDI2DjQ3uzXLYmDZMzPq6KyPcAIv6wf43n285CKqVsIZam+PwDKEYRkzzAhrQgRlVFRcw7oLmiwfp5cfwjYm9sfdKTNFAS97rrU0OwnLEn66LY+yu8BM3RjksQYaOpy0XDdyCidmADAOlek8z5k5E9BshuezG7RViY4UB1A1xL2EV2J/BRWAdwRgN7+kiAiAYd/4QdIt20TXRNigGmZmRVJutcy13U1umOEzLKGER2ZSHn/RP2Ey5s1zl5L5N0f0WDmiGZLti/fSiU0pl2Ca40Z6+N3Vv0rO87UQd3EBC34VT1iwXq+BOkJVG5H1zp18PpV0ILD72KBUwdp6tJy3Tvr4DqieQ7CNF10H+yG5rfIPFJkAthSPrQjvRqD3puIeVEQ/hV8wE+mxiTwqs6MsP9zAUK37EaH/NKjcbKFVQi5a6QO/2+Nr/dOABuTBGg3qJ1Tj2toSlg+dueG+hBWa52Go8S+2pZ/qadcQsccnlKiGIaVRH+XRFSDJDkmVVztluMZZIMScGjafj0eQFOZ4gzq5ujyiEfIFCbgOdsRBozhAfMS+5SX4J4KvirQfcBugEyWmhADoAVRb1ZKBpusNNIPjBr4IrcQBN0n/fOn5LZZTXCsLhMQrQ8Dp1K+GM07lfzHmhDEfYVRFoq+KpKgqbnRm5z8GuaxW",
      "no": 2,
      "readme": {
        "en": "For this challenge, you'll use `Reactivity API: ref` to solve the problem at hand. \nHere's what you need to implement 👇: \n\n```vue\n<script setup lang=\"ts\">\nimport { ref, Ref, reactive } from \"vue\"\n\nconst initial = ref(10)\nconst count = ref(0)\n\n// Challenge 1: Update ref\nfunction update(value) {\n  // impl...\n}\n\n/**\n * Challenge 2: Checks if `count` is a ref object.\n * Make the output to be 1\n*/\nconsole.log(\n  // impl ? 1 : 0\n)\n\n/**\n * Challenge 3: Unwrap ref\n * Make the output to be true\n*/\nfunction initialCount(value: number | Ref<number>) {\n  // Make the output to be true\n  console.log(value === 10)\n}\n\ninitialCount(initial)\n\n/**\n * Challenge 4:\n * create a ref for a property on a source reactive object.\n * The created ref is synced with its source property:\n * mutating the source property will update the ref, and vice-versa.\n * Make the output to be true\n*/\nconst state = reactive({\n  foo: 1,\n  bar: 2,\n})\nconst fooRef = ref() // change the impl...\n\n// mutating the ref updates the original\nfooRef.value++\nconsole.log(state.foo === 2)\n\n// mutating the original also updates the ref\nstate.foo++\nconsole.log(fooRef.value === 3)\n\n</script>\n\n<template>\n  <div>\n    <h1>msg</h1>\n    <p>\n      <span @click=\"update(count-1)\">-</span>\n      {{ count }}\n      <span @click=\"update(count+1)\">+</span>\n    </p>\n  </div>\n</template>\n```",
        "zh-CN": "在这个挑战中，你将使用 `响应式 API: ref` 来完成它。\n以下是你要实现的内容 👇: \n\n```vue\n<script setup lang=\"ts\">\nimport { ref, Ref, reactive } from \"vue\"\n\nconst initial = ref(10)\nconst count = ref(0)\n\n// 挑战 1: 更新 ref\nfunction update(value) {\n  // 实现...\n}\n\n/**\n * 挑战 2: 检查`count`是否为一个 ref 对象\n * 确保以下输出为1\n*/\nconsole.log(\n  // impl ? 1 : 0\n)\n\n/**\n * 挑战 3: 如果参数是一个 ref，则返回内部值，否则返回参数本身\n * 确保以下输出为true\n*/\nfunction initialCount(value: number | Ref<number>) {\n  // 确保以下输出为true\n  console.log(value === 10)\n}\n\ninitialCount(initial)\n\n/**\n * 挑战 4:\n * 为源响应式对象上的某个 `property` 新创建一个 `ref`。\n * 然后,`ref` 可以被传递，它会保持对其源`property`的响应式连接。\n * 确保以下输出为true\n*/\nconst state = reactive({\n  foo: 1,\n  bar: 2,\n})\nconst fooRef = ref() // 修改这里的实现...\n\n// 修改引用将更新原引用\nfooRef.value++\nconsole.log(state.foo === 2)\n\n// 修改原引用也会更新`ref`\nstate.foo++\nconsole.log(fooRef.value === 3)\n\n</script>\n\n<template>\n  <div>\n    <h1>msg</h1>\n    <p>\n      <span @click=\"update(count-1)\">-</span>\n      {{ count }}\n      <span @click=\"update(count+1)\">+</span>\n    </p>\n  </div>\n</template>\n```"
      },
      "info": {
        "en": {
          "title": "ref family",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          },
          "difficulty": "easy",
          "tags": "Composition API,Reactivity:Core"
        },
        "zh-CN": {
          "title": "ref 全家桶",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          }
        }
      }
    },
    {
      "path": "20-v-debounce-click",
      "quizLink": "https://sfc.vuejs.org/#eNqVUT1rwzAQ/SsPLUkMsUPH4BRCu3Qo3Tp5sGNfHRFZUq1Tign575XkFArtkkWgd0/v43QRe2vzsyexFaVrR2kZjthbqEb3uwW7xWOlK11kWaWR4WWwigbSDD4SWu/YDOjkSC3LMyXKa3MiOD9SotRGPynZnmoMxEfTwWg1oSd24FH2PY0UsZbwdSSNNnIDMjR6AsuBHD59gNSUtPe6w2Q8GuUMNAUim+BlrRnnRB0djI9qHalmVoCxLI3OQXmP+rz+oayT13ZwdZSudFbEoq3RjvH+fCOl7NjhEmfXeHwEOOqF0Gm4XMUhEB8aRbky/bISb7HlnQXF6mZRFvNPpM2XTGHnDVO4AeXBMwfzPzUeNptdJW6ZKpHIwBw/8CX/v1KUxawYHpTFLytx/QaEuL/9",
      "no": 20,
      "readme": {
        "en": "For this challenge, we're going to implement a debounced-click-directive. Lets go 👇: \n\n```vue\n<script setup lang='ts'>\n\n/**\n  * Implement the custom directive\n * Make sure the `onClick` method only gets triggered once when clicked many times quickly\n * And you also need to support the debounce delay time option. e.g `v-debounce-click:ms`\n *\n*/\n\nconst VDebounceClick = {\n\n}\n\nfunction onClick() {\n  console.log(\"Only triggered once when clicked many times quickly\")\n}\n\n</script>\n\n<template>\n  <button v-debounce-click:200=\"onClick\">\n    Click on it many times quickly\n  </button>\n</template>\n\n```",
        "zh-CN": "在这个挑战中，我们将尝试实现一个节流点击指令，让我们开始吧 👇:\n\n```vue\n<script setup lang='ts'>\n\n/**\n * 实现以下自定义指令\n * 确保在一定时间内当快速点击按钮多次时只触发一次点击事件\n * 你需要支持节流延迟时间选项, 用法如 `v-debounce-click:ms`\n *\n*/\n\nconst VDebounceClick = {\n\n}\n\nfunction onClick() {\n  console.log(\"Only triggered once when clicked many times quicky\")\n}\n\n</script>\n\n<template>\n  <button v-debounce-click:200=\"onClick\">\n    Click on it many times quickly\n  </button>\n</template>\n\n```"
      },
      "info": {
        "en": {
          "title": "v-debounce-click",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          },
          "difficulty": "medium",
          "tags": "Directives"
        },
        "zh-CN": {
          "title": "节流点击指令",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          }
        }
      }
    },
    {
      "path": "208-tree-component",
      "quizLink": "https://sfc.vuejs.org/#eNqlU8FugzAM/RUvl3YSFG1HRCtN2wf0sFvpAYFp0SCgxJ00If59SRiQtLBNGwcIz37PyXPcsqem2bxfkIUskqkoGgKJdGmgTPhpGzOSMdvFIuZF1dSCoAWBOXSQi7qCmClmzKzwq0B8rtWaI6chaRM4sC7Xk9KaSwJSwZeEEthq7fWh1SGAN/wIYfWw8vpfKqhEBewToaVHPD0XZaagEAbiSPXHpIlu0id258EN63GJZQXmqloKduVJ5SQSnl1twN2CLWFVm5Ww4p13HI5jFpNkLzemXpk44ssmOkdZMPF7O5TCf+3QEn+z47q7jq0L3R1MPN7rTxT0Y2GGwACEVVMmhAYBiNw7H2bqKuvB+brVMYPAZEaBQ2Qeu5mKn4eQE4o8SdEMmhkau9GSRMFPTqttaOrSwD70J9WvDPOC417UjYxafQY7q9utf2nGne9DVoOsK6SzqrxRD/j+rAPdJyt6b6Q=",
      "no": 208,
      "readme": {
        "en": "For this challenge, you need to implement a tree component. Lets go.\r\n\r\n```vue\r\n<script setup lang=\"ts\">\r\ninterface TreeData {\r\n  key: string\r\n  title: string\r\n  children: TreeData[]\r\n}\r\ndefineProps<{data: TreeData[]}>()\r\n</script>\r\n\r\n<template>\r\n  <!-- do something.... -->\r\n</template>\r\n```",
        "zh-CN": "在这个挑战中，你需要实现一个树组件，让我们开始吧。\n\n```vue\n<script setup lang=\"ts\">\ninterface TreeData {\n  key: string\n  title: string\n  children: TreeData[]\n}\ndefineProps<{data: TreeData[]}>()\n</script>\n\n<template>\n  <!-- do something.... -->\n</template>\n```"
      },
      "info": {
        "en": {
          "difficulty": "hard",
          "title": "Tree Component",
          "tags": "Components",
          "author": {
            "github": "murongg",
            "name": "木荣"
          }
        },
        "zh-CN": {
          "difficulty": "hard",
          "title": "树组件",
          "tags": "Components",
          "author": {
            "github": "murongg",
            "name": "木荣"
          }
        }
      }
    },
    {
      "path": "21-functional-component",
      "quizLink": "https://sfc.vuejs.org/#eNptUctOwzAQ/JVRLrQVJMAxSipQuRRxgiPmYNJtY+Gso8RpK1X9d9YxfRw4JZ6Z3dnZPSTPbZtuB0rypOirzrQePfmhhdW8KW98fzNXrNg0res8DuhojSPWnWugEqlTSaCz2UwxZlg2raWG2ENjPXDljWNtUTkp5wDno+whxTvxijr4mmBN70GxrsdksJk1U+yMry/0Sns9lj6mWNQyGl0446mBp70XH+ukp5MpV9jVxKisqX5olSqeZYorx6J/k6LFeaISkynKOQ6KjyFK1IyNS3wKCrBuKJe4r65mldyK8DbIL8SLkz38g380EiIyX5feWtaypaXk34uFLHRyPw3saWESYLOxNDFBkYOH5pu6aex8VZtutR1IOoy6v+mLLB5xPFohi2mt9iQvoAiZ7s6nCBCQB7BUSfiEU45YNLkb+wp35XmSPMURhYw/Ec/Ep8iuTJPjL1eL0Q8=",
      "no": 21,
      "readme": {
        "en": "For this challenge, we're going to implement a functional component. Lets go 👇: \n\n```vue\n<script setup lang='ts'>\n\nimport { ref } from \"vue\"\n\n/**\n * Implement a functional component :\n * 1. Render the list elements (ul/li) with the list data\n * 2. Change the list item text color to red when clicked.\n*/\nconst ListComponent = () => {\n}\n\nconst list = [{\n  name: \"John\",\n}, {\n  name: \"Doe\",\n}, {\n  name: \"Smith\",\n}]\n\nconst activeIndex = ref(0)\n\nfunction toggle(index: number) {\n  activeIndex.value = index\n}\n\n</script>\n\n<template>\n  <list-component\n    :list=\"list\"\n    :active-index=\"activeIndex\"\n    @toggle=\"toggle\"\n  />\n</template>\n\n```",
        "zh-CN": "在这个挑战中，我们将尝试实现一个函数式组件，让我们开始吧 👇:\n\n```vue\n<script setup lang='ts'>\n\nimport { ref } from \"vue\"\n\n/**\n * 实现该函数式组件 :\n * 1. 使用`list`数据渲染列表元素 (ul/li)\n * 2. 当点击列表子元素时,将其文本颜色更改为红色\n*/\nconst ListComponent = () => {\n}\n\nconst list = [{\n  name: \"John\",\n}, {\n  name: \"Doe\",\n}, {\n  name: \"Smith\",\n}]\n\nconst activeIndex = ref(0)\n\nfunction toggle(index: number) {\n  activeIndex.value = index\n}\n\n</script>\n\n<template>\n  <list-component\n    :list=\"list\"\n    :active-index=\"activeIndex\"\n    @toggle=\"toggle\"\n  />\n</template>\n\n```"
      },
      "info": {
        "en": {
          "title": "functional component",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          },
          "difficulty": "medium",
          "tags": "Components"
        },
        "zh-CN": {
          "title": "函数式组件",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          }
        }
      }
    },
    {
      "path": "218-h-render-function",
      "quizLink": "https://sfc.vuejs.org/#eNpVkMtugzAQRX/lyhtIlMI+IlHbrPsHbAgMFNUPZA9VI8S/13ZMmlqyLN+58zqLeJum4nsmcRSVa+04MRzxPEE2ejjVgl0tzrWt9agmYxkft/eZ2Wj01ijUoig3pQjW4Ay3NdoxjL7Isf3CCfkOpzOWEAJC0EgqpBnyLHmyXYitW35V3oeJraPApCbZMEUFqB6DHLvRNVdJnZ+2b6SjWuC1nR0b9dKG0l5PTdIq8EfdcI35qdxjjeioyn/txEE8belRJRgLOupHTRfj/5o0Y924eKR/NOgn2r25mWV8n5PyhEU3io7Itk7Z4S5b0h1ZDzDZgsKz1fjMy/0enYEzinjUA/ZlpAhEjutOrL9D+qg5",
      "no": 218,
      "readme": {
        "en": "For this challenge, you need use `h` render function to implement a component. \r\n\r\nNote: You should make sure that the props are passed correctly, event is triggered correctly and the slot content is rendered correctly. Lets go.\r\n\r\n```vue\r\n<script setup lang=\"ts\">\r\nimport MyButton from \"./MyButton.ts\"\r\nconst onClick = () => {\r\n  console.log('onClick')\r\n}\r\n</script>\r\n\r\n<template>\r\n  <MyButton :disabled=\"false\" @custom-click=\"onClick\">\r\n    my button\r\n  </MyButton>\r\n</template>\r\n\r\n```",
        "zh-CN": "在这个挑战中，你需要使用`h`渲染函数来实现一个组件。\n\n请注意: 你应该确保参数被正确传递、事件被正常触发和插槽内容正常渲染。让我们开始吧。\n\n```vue\n<script setup lang=\"ts\">\nimport MyButton from \"./MyButton.ts\"\nconst onClick = () => {\n  console.log('onClick')\n}\n</script>\n<template>\n  <MyButton :disabled=\"false\" @custom-click=\"onClick\">\n    my button\n  </MyButton>\n</template>\n```"
      },
      "info": {
        "en": {
          "difficulty": "medium",
          "title": "render function[h()]",
          "tags": "Components",
          "author": {
            "github": "murongg",
            "name": "木荣"
          }
        },
        "zh-CN": {
          "difficulty": "medium",
          "title": "渲染函数[h()]",
          "tags": "Components",
          "author": {
            "github": "murongg",
            "name": "木荣"
          }
        }
      }
    },
    {
      "path": "22-custom-element",
      "quizLink": "https://sfc.vuejs.org/#eNpdkMFOwzAQRH9l8KVtJJI7clKBhNQiekOcfImSbZqS2Fa8LkJR/p1NghDiuOsZv9kZ1aP36S2SelA6VEPrGYE4enSlbfINh01hrLFt793AGOHsyUXLVGPCeXA9jBK3UbMoSxJjkeDY+456sgy+ECpXE9ihGqhkQokqBhYjrZp0sZzKDxGJ2kX2keHO8GVDCBf3KYgDdZ3De6T0GowSS5IZWzkbeF6+BOQi2u/3a47fjNvtDnmBURCoXRUXXkP8vKKfvo711qjSe6N2d2lrLQ2Ht9Pr8puWs+6vAT2FIElyY/7FkLnQ2aoqZvC0m+E6W2tcatNM0oWcLROg6/aGts5/kOKWhbzo7I9MTd+Fm4nR",
      "no": 22,
      "readme": {
        "en": "Have you heard about `Web Components` ? \n\nVue has excellent support for both creating and consuming custom elements. \n\nFor this challenge, you can try it out. Lets go 👇: \n\n```vue\n<script setup lang='ts'>\n\nimport { onMounted } from \"vue\"\n\n/**\n * Implement the code to create a custom element.\n * Make the output of page show \"Hello Vue.js\".\n*/\nconst VueJs = \"???\"\n\nonMounted(() => {\n  document.getElementById(\"app\")!.innerHTML = \"<vue-js message=\\\"Hello Vue.js\\\"></vue-js>\"\n})\n\n</script>\n\n<template>\n  <div id=\"app\"></div>\n</template>\n\n```",
        "zh-CN": "你听说过 `Web Components` 吗 ? \n\nVue 能很好地解析和创建 `Web Components` 。\n\n在这个挑战中，我们将尝试了解它，让我们开始吧 👇: \n\n```vue\n<script setup lang='ts'>\n\nimport { onMounted } from \"vue\"\n\n/**\n * 实现以下代码创建一个自定义元素.\n * 确保页面输出 \"Hello Vue.js\".\n*/\nconst VueJs = \"???\"\n\nonMounted(() => {\n  document.getElementById(\"app\")!.innerHTML = \"<vue-js message=\\\"Hello Vue.js\\\"></vue-js>\"\n})\n\n</script>\n\n<template>\n  <div id=\"app\"></div>\n</template>\n\n```"
      },
      "info": {
        "en": {
          "title": "custom element",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          },
          "difficulty": "hard",
          "tags": "Web Components"
        },
        "zh-CN": {
          "title": "自定义元素",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          }
        }
      }
    },
    {
      "path": "23-custom-ref",
      "quizLink": "https://sfc.vuejs.org/#eNpdUMFqAjEU/JUhJ12sKz2WVSj00kMvPecS43M3mE1C8qIV8d/7VlsQD4HMm/eGmbmo95SWx0rqTXXFZpcYhbimjQ5uTDEzLjgZtgOu2Oc4QivZ1koHHdqm0QENPsfkaaTA4IGwr8Gyi8I3rQ7/CLXQB22jQNp90352NL7SAjvy5ow1XlerOS6T6lUHG0MRMfphYZ4PtRrI+6jV/NHDlzkQSs1082CN91tjD4jBn9ETF3B2fU+ZdjKzhNNAAWL5NhmrZycZwG6kAhdgYCmzkd80ipXvaW5NzCZjC9wTzLHeTL6ByXT0tPSx/6Mki7yuvfcqjQpgkrIMkyCgcyFVxvFljNLDWqtJWSu0wnbtw6q6/gLrIZZB",
      "no": 23,
      "readme": {
        "en": "The `debounce function` is so useful in the input box manipulation scenarios.\n\nA `debounced ref` is even more flexible in `Vue.js`. Lets go 👇: \n\n```vue\n<script setup>\nimport { watch } from \"vue\"\n\n/**\n * Implement the function\n*/\nfunction useDebouncedRef(value, delay = 200) {\n\n}\nconst text = useDebouncedRef(\"hello\")\n\n/**\n * Make sure the callback only gets triggered once when entered multiple times in a certain timeout\n*/\nwatch(text, (value) => {\n  console.log(value)\n})\n</script>\n\n<template>\n  <input v-model=\"text\" />\n</template>\n\n```",
        "zh-CN": "防抖函数在输入框操作场景中非常有用。\n\n一个 防抖的`ref`在`Vue.js`更加灵活，让我们开始吧 👇: \n\n```vue\n<script setup>\nimport { watch } from \"vue\"\n\n/**\n * 补全以下函数来实现防抖ref :\n*/\nfunction useDebouncedRef(value, delay = 200) {\n\n}\nconst text = useDebouncedRef(\"hello\")\n\n/**\n * 确保在输入框快速输入时, 只触发一次回调。\n*/\nwatch(text, (value) => {\n  console.log(value)\n})\n</script>\n\n<template>\n  <input v-model=\"text\" />\n</template>\n\n```"
      },
      "info": {
        "en": {
          "title": "custom ref",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          },
          "difficulty": "hard",
          "tags": "Composition API,Reactivity:Advanced"
        },
        "zh-CN": {
          "title": "自定义ref",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          }
        }
      }
    },
    {
      "path": "232-key-modifiers",
      "quizLink": "https://sfc.vuejs.org/#eNqtkcFuwyAMhl/F49L2kEbrcWLRoj3CrrlkwSyoBBA4raKq7z4Ci7SqUpfDbhb+/5/P9oXVzu1PI7IXxgkHp1vCqvGNAeBPRQG1EHDECQYrlFToAwytQKBeBTgrrUEqj4AnNKAk1JrAevjolSSIilYHC85jCCigKFIw/xyJrIG3Tqvu+Nowa97n6rlhVc3L3E3KpF4FYY2eMsm5jyT5/9YIMBYs9ehne8SJghU05HUi+j+giBGmEPf7y7ESZq4OdyS8vDlWegqdV44gII3u54RyNB2pmLjseLu75A5AZ02wGvfafm03S3+zy+3rvX/ZyoOIRfIgJY3zB8Xhxs/LPFjFrt+RMe8U",
      "no": 232,
      "readme": {
        "en": "When listening for keyboard events, we often need to check for specific keys. Vue allows adding key modifiers for v-on or @ when listening for key events,e.g. :\r\n\r\n```vue\r\n<!-- only call `vm.submit()` when the `key` is `Enter` -->\r\n<input @keyup.enter=\"submit\" />\r\n```\r\n\r\nFor this challenges,we'll try something about it,let's go :\r\n\r\n```vue\r\n<template>\r\n  <!-- Add key modifiers made this will fire even if Alt or Shift is also pressed -->\r\n<button @click=\"onClick1\">A</button>\r\n\r\n<!-- Add key modifiers made this will only fire when Shift and no other keys are pressed -->\r\n<button @click=\"onCtrlClick\">A</button>\r\n\r\n<!-- Add key modifiers made this will only fire when no system modifiers are pressed -->\r\n<button @click=\"onClick2\">A</button>\r\n</template>\r\n```",
        "zh-CN": "在监听键盘事件时，我们经常需要检查特定的按键。Vue 允许为 v-on 或者 @ 在监听键盘事件时添加按键修饰符：，例如：\n\n```vue\n<!-- 只有在 `key` 是 `Enter` 时调用 `vm.submit()` -->\n<input @keyup.enter=\"submit\" />\n```\n\n在这个挑战中，我们将尝试它，让我们开始吧：\n\n```vue\n<template>\n  <!-- 添加按键修饰符让即使 Alt 或 Shift 被一同按下时也会触发 -->\n<button @click=\"onClick1\">A</button>\n\n<!-- 添加按键修饰符让有且只有 Shift 被按下的时候才触发 -->\n<button @click=\"onCtrlClick\">A</button>\n\n<!-- 添加按键修饰符让没有任何系统修饰符被按下的时候才触发 -->\n<button @click=\"onClick2\">A</button>\n</template>\n\n```"
      },
      "info": {
        "en": {
          "difficulty": "medium",
          "title": "Key Modifiers",
          "tags": "Event Handling",
          "author": {
            "github": "webfansplz",
            "name": "webfansplz"
          }
        },
        "zh-CN": {
          "difficulty": "medium",
          "title": "按键修饰符",
          "tags": "Event Handling",
          "author": {
            "github": "webfansplz",
            "name": "webfansplz"
          }
        }
      }
    },
    {
      "path": "24-v-active-style",
      "quizLink": "https://sfc.vuejs.org/#eNpdUctO6zAQ/ZWjbNJULrnvi6oEwZIFKxAbjERIp61Vx44cJ4Ci/DtjpwXEJrE9x+flMblq27Ohp2SdFF3tVOvRke9b6MrsytR36YU00qimtc5jhKMtJmydbSATvieTMM6XS2mwxHXTamrIePg9oe47z7iNclR7NVCE3FQHQtc7ihCtOg/lqYGnV4/aautQ71mbOnjLchu87MlE8JO3u52mu+r5CSqMw24TWKVZ5tLU1jDb/VUUu/VvmlBiDP6m8JnHUbHEw0+BXwK/Bf4I/BX4J/Bf4PzxBKsiCUsxljMvfmTSbHvDp5bNnHwslNnQ6xqmb57JZUEMn1fPhkr3wUNEHV0U+VxzrLXg5K2uPPEOKHod/7zSal4Aw2prXSmTRWhJRKaMCWOOUP6MWh/ojUGz0MfpsJq9rLpQBs8fxjRWnK5TbjadxCJDefE1bHl0+/jJcllrVR/49rfY2QlyNA2M4/yWEyeNMXKt5mR5jFbkX/Im0zvyAtK9",
      "no": 24,
      "readme": {
        "en": "For this challenge, we're going to implement an active-style-directive. Lets go 👇: \n\n```vue\n<script setup lang='ts'>\n\nimport { ref } from \"vue\"\n\n/**\n * Implement the custom directive\n * Make sure the list item text color changes to red when the `toggleTab` is toggled\n *\n*/\nconst VActiveStyle = {\n\n}\n\nconst list = [1, 2, 3, 4, 5, 6, 7, 8]\nconst activeTab = ref(0)\nfunction toggleTab(index: number) {\n  activeTab.value = index\n}\n\n</script>\n\n<template>\n  <ul>\n    <li\n      v-for=\"(item,index) in list\"\n      :key=\"index\"\n      v-active-style=\"[{'color':'red'},() => activeTab === index]\"\n      @click=\"toggleTab(index)\"\n    >\n      {{ item }}\n    </li>\n  </ul>\n</template>\n\n```",
        "zh-CN": "在这个挑战中，我们将实现一个\"激活的样式\"指令，让我们开始吧 👇: \n\n```vue\n<script setup lang='ts'>\n\nimport { ref } from \"vue\"\n\n/**\n * 实现该指令 :\n * 当切换该选项卡时，列表项文本颜色变为红色\n * \n*/\nconst VActiveStyle = {\n\n}\n\nconst list = [1, 2, 3, 4, 5, 6, 7, 8]\nconst activeTab = ref(0)\nfunction toggleTab(index: number) {\n  activeTab.value = index\n}\n\n</script>\n\n<template>\n  <ul>\n    <li\n      v-for=\"(item,index) in list\"\n      :key=\"index\"\n      v-active-style=\"[{'color':'red'},() => activeTab === index]\"\n      @click=\"toggleTab(index)\"\n    >\n      {{ item }}\n    </li>\n  </ul>\n</template>\n\n```"
      },
      "info": {
        "en": {
          "title": "v-active-style",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          },
          "difficulty": "hard",
          "tags": "Directives"
        },
        "zh-CN": {
          "title": "激活的样式-指令",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          }
        }
      }
    },
    {
      "path": "243-prevent-event-propagation",
      "quizLink": "https://sfc.vuejs.org/#eNqFjtEKgyAYRl/lw5vqpliXw2J7D2/CScRMJa2b6N2nuWSMoAtB/uPxPyt5GlMusyB3Qi2fBuNghZsNZKf6hhFnGWnZxFQ4XCvrwOXA3zc0yAs0LdZAgMC0FKXUfZ7FJ1kR0HZi19d2/WfTKualGOrEaGTnxD4B6GtY8Nhd3x0L8uJbj1Ne/3IfEWYYxSFU3jg+T3dapb1k+wCXbmrQ",
      "no": 243,
      "readme": {
        "en": "In this challenge,you should make the click event's propagation to be stopped,let's go 👇: \n\n\n```vue\n<script setup lang=\"ts\">\n\nconst click1 = () => {\n  console.log('click1')\n}\n\nconst click2 = () => {\n  console.log('click2')\n}\n\n</script>\n\n<template>\n  <div @click=\"click1()\">\n   <div @click=\"click2()\">\n     click me\n   </div>\n  </div>\n</template>\n```",
        "zh-CN": "在这个挑战中，你需要阻止点击事件的冒泡，让我们开始吧。\r\n\r\n```vue\r\n<script setup lang=\"ts\">\r\n\r\nconst click1 = () => {\r\n  console.log('click1')\r\n}\r\n\r\nconst click2 = () => {\r\n  console.log('click2')\r\n}\r\n\r\n</script>\r\n\r\n<template>\r\n  <div @click=\"click1()\">\r\n   <div @click=\"click2()\">\r\n     click me\r\n   </div>\r\n  </div>\r\n</template>\r\n```"
      },
      "info": {
        "en": {
          "difficulty": "easy",
          "title": "prevent event propagation",
          "tags": "Event Handling",
          "author": {
            "github": "murongg",
            "name": "木荣"
          }
        },
        "zh-CN": {
          "difficulty": "easy",
          "title": "阻止事件冒泡",
          "tags": "Event Handling",
          "author": {
            "github": "murongg",
            "name": "木荣"
          }
        }
      }
    },
    {
      "path": "25-useMouse",
      "quizLink": "https://sfc.vuejs.org/#eNqFj8FqxDAMRH9l8GkXTHJfkkAPPRTaP/DFddXFNJFNrGRbjP+9jgul0MNehJBGTzNZPcTY7RupixqSW30UJJItYrZ8HY2SZNRk2HDf42mJMy3Egq7rDL9v7MQHxpboca/jZ5+EmNaT2PVKokHHVMPZeX617uOMfJDKfdxLqOXU9PiPv3l+CzcNo5ZDt4SdjNKo+nFCLuf2wgVOgoxPjS8UjH+whof+J2tLNghVJ1ZoanvEkHwz4hOsXJArBKXoo6moMvS/B4ZV+QYVUnIE",
      "no": 25,
      "readme": {
        "en": "We should focus on reusability when using `Vue.js`. Composables are a great way to ensure this. Let's go 👇: \n\n\n```vue\n<script setup lang=\"ts\">\n\n// Implement ...\nfunction useEventListener(target, event, callback) {\n\n}\n\n// Implement ...\nfunction useMouse() {\n  useEventListener(window, \"mousemove\", () => {})\n}\nconst { x, y } = useMouse()\n</script>\n\n<template>Mouse position is at: {{ x }}, {{ y }}</template>\n\n\n```",
        "zh-CN": "在使用`Vue.js`时，我们应该关注可复用性，可组合函数是一个很好的方式，让我们开始吧 👇: \n\n\n```vue\n<script setup lang=\"ts\">\n\n// Implement ...\nfunction useEventListener(target, event, callback) {\n\n}\n\n// Implement ...\nfunction useMouse() {\n  useEventListener(window, \"mousemove\", () => {})\n}\nconst { x, y } = useMouse()\n</script>\n\n<template>Mouse position is at: {{ x }}, {{ y }}</template>\n\n\n```"
      },
      "info": {
        "en": {
          "title": "useMouse",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          },
          "difficulty": "medium",
          "tags": "Composable Function"
        },
        "zh-CN": {
          "title": "鼠标坐标",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          }
        }
      }
    },
    {
      "path": "26-v-model",
      "quizLink": "https://sfc.vuejs.org/#eNpNT7tuwzAM/BVCS1oDjvfCLlB0aYeiWyYtqk0nKiRKkCingeF/LxUvWQiQ9+Ddqt5iPC4F1Yvq85hsZMjIJYIzdB4OnA+vmjRZH0NiWCHhDBvMKXjQSnRaVbhrGk3QwKePDj0Sg4GxZBbWZBOObBe8E94TGkZB+Rraq7nBj6XJ0hkCyXEOyYOlWBhw96kiTU2naQyUGU7fl68woYMB1vp4q2OHFuMKyl0SPmn1gc4FOBU8/matniut7/aC90I9o2SVLLIB9PvTpQ2X1lf/QcpVP62AbxFlZfxj2Trh992DWG3/u8pxLg==",
      "no": 26,
      "readme": {
        "en": "For this challenge, we're going to implement a simple `v-model` directive. Lets go 👇: \n\n```vue\n<script setup lang='ts'>\n\nimport { ref } from \"vue\"\n\n/**\n * Implement a custom directive\n * Create a two-way binding on a form input element\n *\n*/\nconst VOhModel = {\n\n}\n\nconst value = ref(\"Hello Vue.js\")\n\n</script>\n\n<template>\n  <input v-oh-model=\"value\" type=\"text\" />\n</template>\n\n```",
        "zh-CN": "在这个挑战中，我们将尝试实现一个简单的`v-model`指令，让我们开始吧 👇: \n\n```vue\n<script setup lang='ts'>\n\nimport { ref } from \"vue\"\n\n/**\n * 实现以下自定义指令\n * 在表单输入元素和数据间创建双向绑定\n *\n*/\nconst VOhModel = {\n\n}\n\nconst value = ref(\"Hello Vue.js\")\n\n</script>\n\n<template>\n  <input v-oh-model=\"value\" type=\"text\" />\n</template>\n\n```"
      },
      "info": {
        "en": {
          "title": "v-model",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          },
          "difficulty": "hard",
          "tags": "Directives"
        },
        "zh-CN": {
          "title": "实现简易版`v-model`指令",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          }
        }
      }
    },
    {
      "path": "27-global-css",
      "quizLink": "https://sfc.vuejs.org/#eNpNjz3PgjAQx7/KhdEEy/MkLrUxcXNxdXIBekKl9ppyiGj87tISE8f75f5vr2zv/fo+YCYzxXjztmTcnR2A8rsDWktwGnB97ZXwM1bi52c+e54sQl+TR52Ih1cUX8hx3psnyv/CP7YR1WQpyIA6XYwPzktrGiehRscYErbGYd6iaVqWsFmk7+grVnAsOwTDMFLoYCXOriI9LXGj0dxK+CuK+5h8vhaRtIlUZd01gQan86UJVEOw00gUC80ZSqQx84rs/QE4hmAY",
      "no": 27,
      "readme": {
        "en": "Sometimes, we may want to set global CSS in the scoped component. Do you know how to solve it?. Lets go 👇: \n\n```css\n<template>\n  <p>Hello Vue.js</p>\n</template>\n\n<style scoped>\n\np {\n  font-size:20px;\n  color:red;\n  text-align: center;\n  line-height: 50px;\n}\n\n/* Make it work */\nbody {\n  width: 100vw;\n  height: 100vh;\n  background-color: burlywood;\n}\n</style>\n```",
        "zh-CN": "有些时候，我们想在具有CSS作用域的`Vue`单文件组件设置全局CSS样式， 该怎么设置呢 ? 让我们开始吧 👇: \n\n```css\n<template>\n  <p>Hello Vue.js</p>\n</template>\n\n<style scoped>\n\np {\n  font-size:20px;\n  color:red;\n  text-align: center;\n  line-height: 50px;\n}\n\n/* 使其工作 */\nbody {\n  width: 100vw;\n  height: 100vh;\n  background-color: burlywood;\n}\n</style>\n```"
      },
      "info": {
        "en": {
          "title": "Global CSS",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          },
          "difficulty": "medium",
          "tags": "CSS Features"
        },
        "zh-CN": {
          "title": "全局CSS",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          }
        }
      }
    },
    {
      "path": "3-losing-reactivity",
      "quizLink": "https://sfc.vuejs.org/#eNqFkctOxDAMRX/FyoYZzaOwrVoEQvxFNqX1QETrRIlTCVX9d9yklJnV7Gz5+lw/JvXq3HmMqEpVhdYbxxCQo4O+oc9aKw5aPWsyg7OeYQKPTctmRJjh4u0AWkmzVpo0XSJJyRLEgG82Eu/2MGkCaC0FwXLDCPVG2KXaUhVpCY/HJZ33Cwngn+U6aduNTR+xBIrDB/oVCxl5TgABJ02CZIaXPTzdaJMHrNBsqCnJiwLeKUSPwF8IHQb2sZV+7MB569CzwQCdpQeG3oYkM/5vGcM/mvKaU3YqJciDzcfVT05WX91mca2KfHO5sCSMg+tFKBlA1ZkxBRK6NZAwuIbgpe1N+y3fWa+TjE5Pe3nVSZAi2RqmbQxZ8y7jkBiHG0ZVZPuqyBNVxdWcav4F8XfDrg==",
      "no": 3,
      "readme": {
        "en": "In `JavaScript`, we always destructure/spread objects.\n\nIn `Vue.js`, we can also destructure/spread the `reactive` objects, but they will end up losing their reactivity.\n\nHow can we make sure that the destructured properties maintain their reactivity? Go ! \n\n\n```vue\n<script setup lang=\"ts\">\nimport { reactive } from \"vue\"\n\nfunction useCount() {\n  const state = reactive({\n    count: 0,\n  })\n\n  function update(value: number) {\n    state.count = value\n  }\n\n  return {\n    state,\n    update,\n  }\n}\n\n// Ensure the destructured properties don't lose their reactivity\nconst { state: { count }, update } = useCount()\n\n</script>\n\n<template>\n  <div>\n    <p>\n      <span @click=\"update(count-1)\">-</span>\n      {{ count }}\n      <span @click=\"update(count+1)\">+</span>\n    </p>\n  </div>\n</template>\n\n```",
        "zh-CN": "在 `JavaScript` 中，我们经常解构/扩展对象。\n\n在`Vue.js`中，我们同样解构/扩展“响应式”对象，但它会失去响应性。\n\n如何保证解构/扩展不丢失响应性 ? 让我们开始吧 ！\n\n```vue\n<script setup lang=\"ts\">\nimport { reactive } from \"vue\"\n\nfunction useCount() {\n  const state = reactive({\n    count: 0,\n  })\n\n  function update(value: number) {\n    state.count = value\n  }\n\n  return {\n    state,\n    update,\n  }\n}\n\n// 确保解构不丢失响应性\nconst { state: { count }, update } = useCount()\n\n</script>\n\n<template>\n  <div>\n    <p>\n      <span @click=\"update(count-1)\">-</span>\n      {{ count }}\n      <span @click=\"update(count+1)\">+</span>\n    </p>\n  </div>\n</template>\n\n```"
      },
      "info": {
        "en": {
          "title": "losing-reactivity",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          },
          "difficulty": "easy",
          "tags": "Composition API,Reactivity:Utilities"
        },
        "zh-CN": {
          "title": "响应性丟失",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          }
        }
      }
    },
    {
      "path": "305-capitalize",
      "quizLink": "https://sfc.vuejs.org/#eNo9zDsKgDAQhOGrLNurvUTBe6QJukUg6qIT8YF3V6NYzjfwH9yo5ksULtnM7eQVNAui1naygyleSiMBpNfgIEmIjB80grCpVJYhKyzTkvVjJyFvnXq44Pfnu734mn+Dzwtrey1F",
      "no": 305,
      "readme": {
        "en": "Create a custom modifier for the 'v-model' directive that changes the first letter of the 'v-model' binding value to uppercase.\r\n\r\n```vue\r\n<script setup>\r\n</script>\r\n\r\n<template>\r\n  <input type=\"text\" v-model.capitalize=\"\" />\r\n</template>\r\n```",
        "zh-CN": "请创建一个自定义的修饰符 `capitalize`，它会自动将 `v-model` 绑定输入的字符串值首字母转为大写：\n```vue\n<script setup>\n</script>\n\n<template>\n  <input type=\"text\" v-model.capitalize=\"\" />\n</template>\n```"
      },
      "info": {
        "en": {
          "difficulty": "easy",
          "title": "Capitalize",
          "tags": "Directives",
          "author": {
            "github": "heappynd",
            "name": "Lov`u`e"
          }
        },
        "zh-CN": {
          "difficulty": "easy",
          "title": "大写",
          "tags": "Directives",
          "author": {
            "github": "heappynd",
            "name": "Lov`u`e"
          }
        }
      }
    },
    {
      "path": "323-prop-validation",
      "quizLink": "https://sfc.vuejs.org/#eNqNjs0KwjAQhF9l2ZNCae4lFPQJfIBc/NlCwSRLshEk5N0liSiIhx5ndr+ZyXhgHh+JcEIdr2FlgUiSeDbBuNWyDwLHJOIdLMFbMDiqritlsL5p1cnGNEPI8v0s1BwA3QnVpFafKw74zfq74EbL6ugUPMdd7mHyZJogl6HKst824NJq5t6m1Vv+zikvE+Rixg==",
      "no": 323,
      "readme": {
        "en": "Please validate the `type` prop of the `Button` component. it's accept the following strings `primary | ghost | dashed | link | text | default` only and the default value is `default`.",
        "zh-CN": "请验证`Button`组件的`Prop`类型 ，使它只接收: `primary | ghost | dashed | link | text | default` ，且默认值为`default`。"
      },
      "info": {
        "en": {
          "difficulty": "easy",
          "title": "Prop Validation",
          "tags": "Components",
          "author": {
            "github": "heappynd",
            "name": "Lov`u`e"
          }
        },
        "zh-CN": {
          "difficulty": "easy",
          "title": "Prop验证",
          "tags": "Components",
          "author": {
            "github": "heappynd",
            "name": "Lov`u`e"
          }
        }
      }
    },
    {
      "path": "4-writable-computed",
      "quizLink": "https://sfc.vuejs.org/#eNpVkM1ugzAQhF9l5BOBCNT2VgFSH6DqoVcfcGCTooKx7DU5IN695k9Nbt7Zb2a9O4kPY9LRk3gXuattaxiO2Bt0St8KKdhJUUrd9mawjAmWrmfUQ288U4MZVzv0kCIkSCG11PWgHQfAa0ax0NHL6VBN592XpqAfAVF0QlFueDqqzhMSLAapsziWGjE+1S+BfwjVbq9wty2rS0fpCnwPoa0Yd0KtNG7EK27J+Y4fXDzgQng7Q+kG1TryEF9DUpwtU3d6+0uSLFKebXcJVwgFU286xRQqIG/acX2Epymnad97nvPMPOnH5v+dPNu8efaQKOY/KqWIAA==",
      "no": 4,
      "readme": {
        "en": "For this challenge, you will need to create a writable computed ref : \n\n```vue\n<script setup lang=\"ts\">\nimport { ref, computed } from \"vue\"\n\nconst count = ref(1)\nconst plusOne = computed(() => count.value + 1)\n\n/**\n * Make the `plusOne` writable.\n * So that we can get the result `plusOne` to be 3, and `count` to be 2.\n*/\n\nplusOne.value++\n\n</script>\n\n<template>\n  <div>\n    <p>{{ count }}</p>\n    <p>{{ plusOne }}</p>\n  </div>\n</template>\n\n```",
        "zh-CN": "在这个挑战中，你需要创建一个可写的计算属性 :\n\n```vue\n<script setup lang=\"ts\">\nimport { ref, computed } from \"vue\"\n\nconst count = ref(1)\nconst plusOne = computed(() => count.value + 1)\n\n/**\n * 确保 `plusOne` 可以被写入。\n * 最终我们得到的结果应该是 `plusOne` 等于 3 和 `count` 等于 2。\n*/\n\nplusOne.value++\n\n</script>\n\n<template>\n  <div>\n    <p>{{ count }}</p>\n    <p>{{ plusOne }}</p>\n  </div>\n</template>\n\n```"
      },
      "info": {
        "en": {
          "title": "writable-computed",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          },
          "difficulty": "easy",
          "tags": "Composition API,Reactivity:Core"
        },
        "zh-CN": {
          "title": "可写的计算属性",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          }
        }
      }
    },
    {
      "path": "5-watch-family",
      "quizLink": "https://sfc.vuejs.org/#eNqFk11rwjAUhv/KIVdVxKq7GVKFIexuDIawm9zUeqyZMQ1N6hil/30nH1Unc7tLTt6T933y0bInrcenBtmcZaaohbZg0DYaZK7KBWfWcLbkShx1VVtoocbdCD5zW+yhg11dHYEzaueMK66KShkLRdUoCwsnTSYDV0+HQ65gCKt9LiWqEmE6h3e/SaUK9Gsv+QHBNDWC3WN0KEi+yYsDqeQX2FqUJdYm9gxTrrws8YYjSAawWEJLu1EEZSqJY1mVCWevV924De2MgnU+nO8en3LZIIWeckX8a3HEqrFJ2PKnYnYHaXZG2nxgYf+HEuYSKuCE8zM2t87InV+kIf85TEZ95IDtdX9gr8nSa8bhRhq9pcn2Cj2serCoIbzf6R7msOqDP8vG7IHOSKjyBvMkjCAPjxv9ACW+4S4Q9oyhFiEpS6jmZBRK7pADJdXuMoZdAkCEIvnlLh+dYZaGd02vmCYWj1pSLJoBZFtx8gMa6jgAaNv4hLsurqX9YqZdOvoWkcl9jXOTS3/bkqXBIkuvjFn3DXXSKT8=",
      "no": 5,
      "readme": {
        "en": "For this challenge, you'll use `Reactivity API: watch` to complete the challenge. \nHere's what you need to implement 👇: \n\n```vue\n<script setup lang=\"ts\">\nimport { ref, watch } from \"vue\"\n\nconst count = ref(0)\n\n/**\n * Challenge 1: Watch once\n * Make sure the watch callback is only triggered once\n*/\nwatch(count, () => {\n  console.log(\"Only triggered once\")\n})\n\ncount.value = 1\nsetTimeout(() => count.value = 2)\n\n/**\n * Challenges 2: Watch object\n * Make sure the watch callback is triggered\n*/\nconst state = ref({\n  count: 0,\n})\n\nwatch(state, () => {\n  console.log(\"The state.count updated\")\n})\n\nstate.value.count = 2\n\n/**\n * Challenge 3: Callback Flush Timing\n * Make sure visited the updated eleRef\n*/\n\nconst eleRef = ref()\nconst age = ref(2)\nwatch(age, () => {\n  console.log(eleRef.value)\n})\nage.value = 18\n\n</script>\n\n<template>\n  <div>\n    <p>\n      {{ count }}\n    </p>\n    <p ref=\"eleRef\">\n      {{ age }}\n    </p>\n  </div>\n</template>\n\n```",
        "zh-CN": "在这个挑战中，你将使用 `响应式 API: watch` 来完成它。\n以下是你要实现的内容 👇: \n\n```vue\n<script setup lang=\"ts\">\nimport { ref, watch } from \"vue\"\n\nconst count = ref(0)\n\n/**\n * 挑战 1: Watch 一次\n * 确保副作用函数只执行一次\n*/\nwatch(count, () => {\n  console.log(\"Only triggered once\")\n})\n\ncount.value = 1\nsetTimeout(() => count.value = 2)\n\n/**\n * 挑战 2: Watch 对象\n * 确保副作用函数被正确触发\n*/\nconst state = ref({\n  count: 0,\n})\n\nwatch(state, () => {\n  console.log(\"The state.count updated\")\n})\n\nstate.value.count = 2\n\n/**\n * 挑战 3: 副作用函数刷新时机\n * 确保正确访问到更新后的`eleRef`值\n*/\n\nconst eleRef = ref()\nconst age = ref(2)\nwatch(age, () => {\n  console.log(eleRef.value)\n})\nage.value = 18\n\n</script>\n\n<template>\n  <div>\n    <p>\n      {{ count }}\n    </p>\n    <p ref=\"eleRef\">\n      {{ age }}\n    </p>\n  </div>\n</template>\n\n```"
      },
      "info": {
        "en": {
          "title": "watch family",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          },
          "difficulty": "easy",
          "tags": "Composition API,Reactivity:Core"
        },
        "zh-CN": {
          "title": "watch 全家桶",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          }
        }
      }
    },
    {
      "path": "6-shallow-ref",
      "quizLink": "https://sfc.vuejs.org/#eNpNkE9rhDAQxb/KIydXFkN7XHSh0Gtb6J9bLqnOurIxCSauFPG7d9QVvM0w7/3mzYzixfvs3pM4iTyUXeMjAsXew2hbF0rEoMRZ2ab1rosYEa7aGDd80uWIQcfyigmXzrVQgilKKKts6WxgTNSRUOwcyYjS9Tae8ITpMCulxKujgPePb8SuqWvqlF2wyWI/IjmgOGNUFuy1wRnKjKsTJb7mebbw8OMrbiolGDodOWVF5E9M7GlblKaMSPHmqubyh3glxlWE4LjWEQP32qLVN1qG62klJ//V5W3LlimbSsXHzavv2vRbgALP85Zcri/kh3ETqfWGldwBedXcl4JL/yiAkR+6u2OaHgq5SnK5unK5Y4npH/zDlNM=",
      "no": 6,
      "readme": {
        "en": "For this challenge, you'll use `Reactivity API: shallowRef` to complete the challenge. \nHere's what you need to implement 👇: \n\n```vue\n<script setup lang=\"ts\">\nimport { shallowRef, watch } from \"vue\"\n\nconst state = shallowRef({ count: 1 })\n\n// Does NOT trigger\nwatch(state, () => {\n  console.log(\"State.count Updated\")\n}, { deep: true })\n\n/**\n * Modify the code so that we can make the watch callback trigger.\n*/\nstate.value.count = 2\n\n</script>\n\n<template>\n  <div>\n    <p>\n      {{ state.count }}\n    </p>\n  </div>\n</template>\n\n```",
        "zh-CN": "在这个挑战中，你将使用 `响应式 API: shallowRef` 来完成它。\n以下是你要实现的内容 👇: \n\n```vue\n<script setup lang=\"ts\">\nimport { shallowRef, watch } from \"vue\"\n\nconst state = shallowRef({ count: 1 })\n\n// 回调没被触发\nwatch(state, () => {\n  console.log(\"State.count Updated\")\n}, { deep: true })\n\n/**\n * 修改以下代码使watch回调被触发\n *\n*/\nstate.value.count = 2\n\n</script>\n\n<template>\n  <div>\n    <p>\n      {{ state.count }}\n    </p>\n  </div>\n</template>\n\n```"
      },
      "info": {
        "en": {
          "title": "shallow ref",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          },
          "difficulty": "easy",
          "tags": "Composition API,Reactivity:Advanced"
        },
        "zh-CN": {
          "title": "浅层 ref",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          }
        }
      }
    },
    {
      "path": "7-raw-api",
      "quizLink": "https://sfc.vuejs.org/#eNqlUbFugzAU/JWTpwRVoK4RVOrYoUu7enGJSa2CbeEHVYX49z5sSFCXDtnu5Lt79/wm8ex9Pg5anEQZ6t54QtA0eLTKXiopKEjxJK3pvOsJE3qtajKjfoAJbyvGjKZ3HaTgICmklbZ2NnASKdKo2Fa7wdIJj5i3ty3ofdVs/BBNxyWkyDJpkeHVnU3zA/rUnHPWCI6xInwzVxad+tLx0Q3kB8IHs37QubRZkaa5Vuetuxz+zKyq1PDOYY1qw34awdjG/bP2S5Jct14ssce+7+2Lr9UX3zEKyyLdi6/DhHTnW96FGVCezRgBQ78CYLpdL35AHtth5m5RWSRpWSR3WewyxfwLXYvBcA==",
      "no": 7,
      "readme": {
        "en": "For this challenge, you'll use `Reactivity API: [xx]Raw` to complete the challenge. \nHere's what you need to implement 👇: \n\n```vue\n<script setup lang=\"ts\">\nimport { reactive, isReactive } from \"vue\"\n\nconst state = { count: 1 }\nconst reactiveState = reactive(state)\n\n/**\n * Modify the code so that we can make the output be true.\n*/\nconsole.log(reactiveState === state)\n\n/**\n * Modify the code so that we can make the output be false.\n*/\nconst info = { count: 1 }\nconst reactiveInfo = reactive(info)\n\nconsole.log(isReactive(reactiveInfo))\n\n</script>\n\n<template>\n  <div>\n    <p>\n      {{ reactiveState.count }}\n    </p>\n  </div>\n</template>\n\n\n```",
        "zh-CN": "在这个挑战中，你将使用 `响应式 API: [xx]Raw` 来完成它。\n以下是你要实现的内容 👇: \n\n```vue\n<script setup lang=\"ts\">\nimport { reactive, isReactive } from \"vue\"\n\nconst state = { count: 1 }\nconst reactiveState = reactive(state)\n\n/**\n * 修改以下代码使输出为true\n*/\nconsole.log(reactiveState === state)\n\n/**\n * 修改以下代码使输出为false\n*/\nconst info = { count: 1 }\nconst reactiveInfo = reactive(info)\n\nconsole.log(isReactive(reactiveInfo))\n\n</script>\n\n<template>\n  <div>\n    <p>\n      {{ reactiveState.count }}\n    </p>\n  </div>\n</template>\n\n\n```"
      },
      "info": {
        "en": {
          "title": "Raw API",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          },
          "difficulty": "medium",
          "tags": "Reactivity:Advanced"
        },
        "zh-CN": {
          "title": "原始值 API",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          }
        }
      }
    },
    {
      "path": "8-effect-scope",
      "quizLink": "https://sfc.vuejs.org/#eNpdUctugzAQ/JWRT6RCQY16iiBSVPXQW6X26EMILAQVbMuP9ID49y6vJMrJ6x3PeGa3F0djttdAYi9SV9jGeDjywaDNVZ1J4Z0UB6mazmjr0cNSFaPQnQmeyhh/uS8uy/FRVVR4DKis7iAFq0ohlVSFVs4zKShPFtmoEb1u1n6pw7mlkvurbBRtkB1Wwvaat4Hwgh1TpEoSBEfwF8KJph+/C23ohOPXJ7xGl/9OKL+ZYQfntWGoJm5b5NXo4kyNquFtU9dk+XetChrlpyTR4inG6kQ53dK21fUKza42bOkh+834/bkU72OMPc8jXqPeueMMHkNm2I1N3sBP05EOq2IvFZ7mkeFNqmHSSJN5c7wnvnjqTJt74huQls11Krg0SwH0/W3qw7CgyQynycxIkwcdMfwDpH69fA==",
      "no": 8,
      "readme": {
        "en": "For this challenge, you'll use `Reactivity API: effectScope` to complete the challenge. \nHere's what you need to implement 👇: \n\n```vue\n<script setup lang=\"ts\">\nimport { ref, computed, watch, watchEffect } from \"vue\"\n\nconst counter = ref(1)\nconst doubled = computed(() => counter.value * 2)\n\n// use the `effectScope` API to make these effects stop together after being triggered once\n\nwatch(doubled, () => console.log(doubled.value))\nwatchEffect(() => console.log(\"Count: \", doubled.value))\n\ncounter.value = 2\n\nsetTimeout(() => {\n  counter.value = 4\n})\n\n</script>\n\n<template>\n  <div>\n    <p>\n      {{ doubled }}\n    </p>\n  </div>\n</template>\n\n\n```",
        "zh-CN": "在这个挑战中，你将使用 `响应式 API: effectScope` 来完成它。\n以下是你要实现的内容 👇: \n\n```vue\n<script setup lang=\"ts\">\nimport { ref, computed, watch, watchEffect } from \"vue\"\n\nconst counter = ref(1)\nconst doubled = computed(() => counter.value * 2)\n\n// 使用 `effectScope` API 使这些Effect效果在触发一次后停止\n\nwatch(doubled, () => console.log(doubled.value))\nwatchEffect(() => console.log(\"Count: \", doubled.value))\n\ncounter.value = 2\n\nsetTimeout(() => {\n  counter.value = 4\n})\n\n</script>\n\n<template>\n  <div>\n    <p>\n      {{ doubled }}\n    </p>\n  </div>\n</template>\n\n\n```"
      },
      "info": {
        "en": {
          "title": "effectScope API",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          },
          "difficulty": "medium",
          "tags": "Composition API,Reactivity:Advanced"
        },
        "zh-CN": {
          "title": "Effect作用域 API",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          }
        }
      }
    },
    {
      "path": "9-dependency-injection",
      "quizLink": "https://sfc.vuejs.org/#eNqFkMFugzAQRH9l5BNREJBrBZGinvoPPgSZJXELtmUWLoh/7wJpVPXQnOzxjNZvZ1aXELJpJPWmysFEGxgD8RjQ1e5WacWDVmftbB98ZMyI1KYI0U+2ISxoo++hlQzQ6pl6v9uu+bGyfJPrH2vEeDcwjB8do1qnJaeDdo+BiVabo1W6R8QSmg/HFKe6S5IDqjNm7bDbmTyOdDxqt6Q4FUUh+TLf1xBoEUx96GomUUC5g+UiyvyXo1L1ZHzRQ57j0jSoESwZgm8FRIpgj77+kvNOuG5oV2xsuBHDuk8yTI1cJLhmzAZivPTlSPb4F3ueH30ty1/w5Rt0TZvK",
      "no": 9,
      "readme": {
        "en": "For this challenge, you'll use the `Composition API: Dependency Injection` to complete the challenge. \nHere's what you need to implement 👇: \n\n```vue\n// Child.vue \n\n<script setup lang=\"ts\">\n// Add a piece of code to make the `count` value get injected into the child component.\n</script>\n\n<template>\n  {{ count }}\n</template>\n```",
        "zh-CN": "在这个挑战中，你将使用 `组合式 API: 依赖注入` 来完成它。\n以下是你要实现的内容 👇: \n\n```vue\n// Child.vue \n\n<script setup lang=\"ts\">\n// 添加代码,使`count`值注入子组件\n</script>\n\n<template>\n  {{ count }}\n</template>\n```"
      },
      "info": {
        "en": {
          "title": "Dependency Injection",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          },
          "difficulty": "easy",
          "tags": "Composition API"
        },
        "zh-CN": {
          "title": "依赖注入",
          "author": {
            "name": "webfansplz",
            "github": "webfansplz"
          }
        }
      }
    }
  ],
  "challengesByDifficulty": {
    "warm": [
      {
        "path": "1-hello-word",
        "quizLink": "https://sfc.vuejs.org/#eNpNjDsOwkAMRK9iuYKGFS1aItFxAxo3KHFgpf1Yu06aKHfHJE0qz+h53oIPkcs8Md7Qt74GUWisk3SUQ5JSFRaoPMIKYy0JCO2XkHJfclNI7QP3Pz8RPjnGAq9S40B4puzd7jOTFeUk8a1sDcAPYd6Cxe+1M4t3djfkdubdYYHrDzDkOR0=",
        "no": 1,
        "readme": {
          "en": "Hello, World!\n\nIn Vue.js Challenges, we use the Vue.js SFC Playground based on [vuejs/repl](https://github.com/vuejs/repl) to code online.\n\nFor this challenge, you will need to change the following code to make the page show \"Hello World\" correctly.\n\n```vue\n<script setup>\nimport { ref } from \"vue\"\nconst msg = ref(\"Hello World\")\n</script>\n\n<template>\n  <div>\n    <!-- The output of the page is expected to be Hello World -->\n    <h1>msg</h1>\n  </div>\n</template>\n\n```\n\nClick the `Take the Challenge` button to start coding! Happy Hacking!",
          "zh-CN": "Hello，World！\n\n在这个挑战中，我们使用基于 [vuejs/repl](https://github.com/vuejs/repl) 的`SFC`编码游乐场进行在线编码。\n\n对于这个挑战，您将需要更改以下代码，以使页面正确显示“Hello World”。\n\n```vue\n<script setup>\nimport { ref } from \"vue\"\nconst msg = ref(\"Hello World\")\n</script>\n\n<template>\n  <div>\n    <!-- 页面的期望输出是Hello World -->\n    <h1>msg</h1>\n  </div>\n</template>\n\n```\n\n\n点击上方的 `接受挑战` 开始编码！旅途愉快！"
        },
        "info": {
          "en": {
            "title": "Hello World",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            },
            "difficulty": "warm"
          },
          "zh-CN": {
            "title": "你好 !",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            }
          }
        }
      }
    ],
    "easy": [
      {
        "path": "10-lifecycle",
        "quizLink": "https://sfc.vuejs.org/#eNqNUrtygzAQ/JWLKmdMwGk92JOMqxTpUqqxQThKhKQREi4Y/j2nB/hVxN3pdrVadhnIu9Z57xhZk7KrDNcWOmadBrGXxw0ltqNkSyVvtTIWBjCsyUAb1fOawQiNUS1QggKUzKzdNxf1BOVFOPo3PIXKSsnOQs87fhAMNl5xYY1jzxNkectMAqQTYgYq5aRNwAq3ycYCXforlGTx7hUULnkoDAhR2ThZWa4kWHU8CrZ4hoFKmCzl/V44b+zpakHlSGVZxIwwETxY1mqxtwxPAGXN+zDgGAPoX3iDCSYVSqCYcJ0GHA/OWnTyVgle/fq8g6WQeWQAfIVVSnWnMGPJ8JMmhSJKTNpFFC+L6KcsLlySjMxlPFq4kp8+OFZnwOUPq+xd67e9Rdq5lbv+ZkLqJpQyv7PAPjbbWElQmAs5cVmrU452P5BocH3Jhagf2culX40ZvK5W/lcZwxsP1neu5ybzNQxD+ooR/4b/8x7/AAjTI4w=",
        "no": 10,
        "readme": {
          "en": "For this challenge, you'll use the `Composition API: Lifecycle Hooks` to complete the challenge. \nHere's what you need to implement 👇: \n\n```vue\n// Child.vue\n\n<script setup lang=\"ts\">\nimport { onMounted, inject } from \"vue\"\n\nconst timer = inject('timer')\nconst count = inject('count')\n\n\nonMounted(() => {\n  // The timer will work abnormally when the child component is toggled. Lets fix it.\n  timer.value = window.setInterval(() => {\n    count.value++\n  }, 1000)\n})\n\n</script>\n\n<template>\n  <div>\n    <p>\n      Child Component: {{ count }}\n    </p>\n  </div>\n</template>\n\n```",
          "zh-CN": "在这个挑战中，你将使用 `组合式 API: 生命周期钩子` 来完成它。\n以下是你要实现的内容 👇: \n\n```vue\n// Child.vue\n\n<script setup lang=\"ts\">\nimport { onMounted, inject } from \"vue\"\n\nconst timer = inject('timer')\nconst count = inject('count')\n\n\nonMounted(() => {\n  // 切换子组件时, 定时器将不正常工作, 让我们来修复它 . \n  timer.value = window.setInterval(() => {\n    count.value++\n  }, 1000)\n})\n\n</script>\n\n<template>\n  <div>\n    <p>\n      Child Component: {{ count }}\n    </p>\n  </div>\n</template>\n\n```"
        },
        "info": {
          "en": {
            "title": "Lifecycle Hooks",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            },
            "difficulty": "easy",
            "tags": "Composition API,Lifecycle"
          },
          "zh-CN": {
            "title": "生命周期钩子",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            }
          }
        }
      },
      {
        "path": "11-next-dom-update",
        "quizLink": "https://sfc.vuejs.org/#eNpNUMtugzAQ/JWRTwmpoL1WUPV56KHqD/hCzCZBAdsy66QR4t+7hrTKxdbsjMezM6oX7/NTJPWoysGE1jMG4uiftG177wJjRKAdJuyC66GVaLXSVlvj7MAwLlpGlTSr+3Wa76I13DqL1ppAPVlerTFqi0Wbn+ou0maTpECRZelChvfvL7QDrGNciBF9UzM1dzi4M0xtcSb09ZEwxEDgQ81y0PxqTzz86a9mX0mZeBfZR8ZWUJDgwmbF8nOK7zrKO7dfbRpnYkqai9dHN4d+vXw2K63mzBS0WudMP/zmBKWFqwoPsu6kbVksvUljAph630kSQUC5jcypiaa6ccKz6VpzlNF/Q1rNemAcr41O4iwGxeIgbFncWKvpF/MXmCU=",
        "no": 11,
        "readme": {
          "en": "When you mutate a reactive state in `Vue.js`, the resulting DOM updates are not applied synchronously. \n\n`Vue.js` provides a utility for waiting for the next DOM update flush. Lets Go 👇: \n\n```vue\n<script setup>\nimport { ref } from \"vue\"\n\nconst count = ref(0)\n\nfunction increment() {\n  count.value++\n\n  /**\n   * DOM is not yet updated, how can we make sure that the DOM gets updated\n   * Make the output be true\n  */\n\n  console.log(+document.getElementById(\"counter\").textContent === 1)\n}\n</script>\n\n<template>\n  <button id=\"counter\" @click=\"increment\">\n    {{ count }}\n  </button>\n</template>\n\n\n```",
          "zh-CN": "在`Vue.js`中改变响应式状态时，DOM不会同步更新。 \n`Vue.js` 提供了一个用于等待下一次DOM更新的方法，让我们开始吧 👇: \n\n```vue\n<script setup>\nimport { ref } from \"vue\"\n\nconst count = ref(0)\n\nfunction increment() {\n  count.value++\n\n  /**\n   * DOM还未更新,如何确保DOM已经更新 ?\n   * 请保证以下输出为true\n  */\n\n  console.log(+document.getElementById(\"counter\").textContent === 1)\n}\n</script>\n\n<template>\n  <button id=\"counter\" @click=\"increment\">\n    {{ count }}\n  </button>\n</template>\n\n```"
        },
        "info": {
          "en": {
            "title": "Next DOM update flush",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            },
            "difficulty": "easy",
            "tags": "Global API:General"
          },
          "zh-CN": {
            "title": "下一次DOM更新",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            }
          }
        }
      },
      {
        "path": "13-dom-portal",
        "quizLink": "https://sfc.vuejs.org/#eNpNjbsOwjAUQ3/FZA/sKFRiY2ZhydDSXGilvJTcIqEo/07TLoyWfXyKuMZ4/CwkzkLlMc2RkYmX2Gmv/Rh8Zrj8xgVa3MjagEdI1mjRanXaiW2rmFy0A9OaAHWQEnfyhlLGzOCAAeM0WwOy5Mgzwgs8EfpnMN8eUu5cjoPvStmkta6Glpvq717UH8iwP00=",
        "no": 13,
        "readme": {
          "en": "`Vue.js` provides a built-in component that renders its slot content to another part of the `DOM`. \n\nDo you know the built-in component?. Lets try it 👇: \n\n```vue\n<script setup>\n\nconst msg = \"Hello World\"\n\n</script>\n\n<template>\n  <!-- Renders it to a child element of the `body` -->\n  <span>{{ msg }}</span>\n</template>\n\n\n```",
          "zh-CN": "`Vue.js`提供了一个内置组件，将其插槽内容渲染到另一个DOM，成为该DOM的一部分。\n\n你知道它是什么吗 ? 让我们试试👇:\n\n```vue\n<script setup>\n\nconst msg = \"Hello World\"\n\n</script>\n\n<template>\n  <!-- 将以下元素渲染成`body`的子元素 -->\n  <span>{{ msg }}</span>\n</template>\n\n\n```"
        },
        "info": {
          "en": {
            "title": "DOM Portal",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            },
            "difficulty": "easy",
            "tags": "Components,Built-ins"
          },
          "zh-CN": {
            "title": "DOM传送门",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            }
          }
        }
      },
      {
        "path": "14-dynamic-css-values",
        "quizLink": "https://sfc.vuejs.org/#eNpNUEFuhDAM/IqVE6AVUKmnFYvUYw/7gk0PLDEFKcRRErZCiL/XSVSpN3vsGc/4EB/W1q8NxVV0fnSLDeAxbLaXZlktuQAHOJzghMnRClLwrhTSjGR8gDDjinCLG4UUDpUUpTR/05E0Oc/jhxRPHXkXFthRa/rJdWLE4tshGim+Ipnvf5qA7jXooijh1sMhDeRbNYNbvJi1H/chzPWkiVyRSjcYRSuzKngvWe28wFvbtslU1+SAHI2bgKvVQ0DuADrbz9FW18TgXfNvyK0Pu0bwI1lUjDQV3Ekt0x4tsRGFEAiei1EJULsZ1mXMDqFqpLE5QAKu/CvFvpKdqMuC4vwFPjyGKQ==",
        "no": 14,
        "readme": {
          "en": "SFC `<style>` tags support linking CSS values to dynamic components.\n\nDo you know what it is?. Lets try it 👇: \n\n```vue\n<script setup>\nimport { ref } from \"vue\"\nconst theme = ref(\"red\")\n\nconst colors = [\"blue\", \"yellow\", \"red\", \"green\"]\n\nsetInterval(() => {\n  theme.value = colors[Math.floor(Math.random() * 4)]\n}, 1000)\n\n</script>\n\n<template>\n  <p>hello</p>\n</template>\n\n<style scoped>\n/* Modify the code to bind the dynamic color */\np {\n  color: red\n}\n</style>\n\n```",
          "zh-CN": "`Vue`单文件组件 `<style>` 模块支持给CSS绑定动态值。\n\n你知道它是什么吗 ? 让我们试试👇:\n\n```vue\n<script setup>\nimport { ref } from \"vue\"\nconst theme = ref(\"red\")\n\nconst colors = [\"blue\", \"yellow\", \"red\", \"green\"]\n\nsetInterval(() => {\n  theme.value = colors[Math.floor(Math.random() * 4)]\n}, 1000)\n\n</script>\n\n<template>\n  <p>hello</p>\n</template>\n\n<style scoped>\n/* 修改以下代码绑定动态颜色 */\np {\n  color: red\n}\n</style>\n\n```"
        },
        "info": {
          "en": {
            "title": "Dynamic css values",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            },
            "difficulty": "easy",
            "tags": "CSS Features"
          },
          "zh-CN": {
            "title": "动态CSS",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            }
          }
        }
      },
      {
        "path": "2-ref-family",
        "quizLink": "https://sfc.vuejs.org/#eNqFVE1v2zAM/SuET/lo7CbdyXC6DT3vMmw3HaoocqJFkQRJdlFk+e+jKceJuwW7GKQsvvf4IZ6yr87lbSOzMquC8MpFCDI2DjQ3uzXLYmDZMzPq6KyPcAIv6wf43n285CKqVsIZam+PwDKEYRkzzAhrQgRlVFRcw7oLmiwfp5cfwjYm9sfdKTNFAS97rrU0OwnLEn66LY+yu8BM3RjksQYaOpy0XDdyCidmADAOlek8z5k5E9BshuezG7RViY4UB1A1xL2EV2J/BRWAdwRgN7+kiAiAYd/4QdIt20TXRNigGmZmRVJutcy13U1umOEzLKGER2ZSHn/RP2Ey5s1zl5L5N0f0WDmiGZLti/fSiU0pl2Ca40Z6+N3Vv0rO87UQd3EBC34VT1iwXq+BOkJVG5H1zp18PpV0ILD72KBUwdp6tJy3Tvr4DqieQ7CNF10H+yG5rfIPFJkAthSPrQjvRqD3puIeVEQ/hV8wE+mxiTwqs6MsP9zAUK37EaH/NKjcbKFVQi5a6QO/2+Nr/dOABuTBGg3qJ1Tj2toSlg+dueG+hBWa52Go8S+2pZ/qadcQsccnlKiGIaVRH+XRFSDJDkmVVztluMZZIMScGjafj0eQFOZ4gzq5ujyiEfIFCbgOdsRBozhAfMS+5SX4J4KvirQfcBugEyWmhADoAVRb1ZKBpusNNIPjBr4IrcQBN0n/fOn5LZZTXCsLhMQrQ8Dp1K+GM07lfzHmhDEfYVRFoq+KpKgqbnRm5z8GuaxW",
        "no": 2,
        "readme": {
          "en": "For this challenge, you'll use `Reactivity API: ref` to solve the problem at hand. \nHere's what you need to implement 👇: \n\n```vue\n<script setup lang=\"ts\">\nimport { ref, Ref, reactive } from \"vue\"\n\nconst initial = ref(10)\nconst count = ref(0)\n\n// Challenge 1: Update ref\nfunction update(value) {\n  // impl...\n}\n\n/**\n * Challenge 2: Checks if `count` is a ref object.\n * Make the output to be 1\n*/\nconsole.log(\n  // impl ? 1 : 0\n)\n\n/**\n * Challenge 3: Unwrap ref\n * Make the output to be true\n*/\nfunction initialCount(value: number | Ref<number>) {\n  // Make the output to be true\n  console.log(value === 10)\n}\n\ninitialCount(initial)\n\n/**\n * Challenge 4:\n * create a ref for a property on a source reactive object.\n * The created ref is synced with its source property:\n * mutating the source property will update the ref, and vice-versa.\n * Make the output to be true\n*/\nconst state = reactive({\n  foo: 1,\n  bar: 2,\n})\nconst fooRef = ref() // change the impl...\n\n// mutating the ref updates the original\nfooRef.value++\nconsole.log(state.foo === 2)\n\n// mutating the original also updates the ref\nstate.foo++\nconsole.log(fooRef.value === 3)\n\n</script>\n\n<template>\n  <div>\n    <h1>msg</h1>\n    <p>\n      <span @click=\"update(count-1)\">-</span>\n      {{ count }}\n      <span @click=\"update(count+1)\">+</span>\n    </p>\n  </div>\n</template>\n```",
          "zh-CN": "在这个挑战中，你将使用 `响应式 API: ref` 来完成它。\n以下是你要实现的内容 👇: \n\n```vue\n<script setup lang=\"ts\">\nimport { ref, Ref, reactive } from \"vue\"\n\nconst initial = ref(10)\nconst count = ref(0)\n\n// 挑战 1: 更新 ref\nfunction update(value) {\n  // 实现...\n}\n\n/**\n * 挑战 2: 检查`count`是否为一个 ref 对象\n * 确保以下输出为1\n*/\nconsole.log(\n  // impl ? 1 : 0\n)\n\n/**\n * 挑战 3: 如果参数是一个 ref，则返回内部值，否则返回参数本身\n * 确保以下输出为true\n*/\nfunction initialCount(value: number | Ref<number>) {\n  // 确保以下输出为true\n  console.log(value === 10)\n}\n\ninitialCount(initial)\n\n/**\n * 挑战 4:\n * 为源响应式对象上的某个 `property` 新创建一个 `ref`。\n * 然后,`ref` 可以被传递，它会保持对其源`property`的响应式连接。\n * 确保以下输出为true\n*/\nconst state = reactive({\n  foo: 1,\n  bar: 2,\n})\nconst fooRef = ref() // 修改这里的实现...\n\n// 修改引用将更新原引用\nfooRef.value++\nconsole.log(state.foo === 2)\n\n// 修改原引用也会更新`ref`\nstate.foo++\nconsole.log(fooRef.value === 3)\n\n</script>\n\n<template>\n  <div>\n    <h1>msg</h1>\n    <p>\n      <span @click=\"update(count-1)\">-</span>\n      {{ count }}\n      <span @click=\"update(count+1)\">+</span>\n    </p>\n  </div>\n</template>\n```"
        },
        "info": {
          "en": {
            "title": "ref family",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            },
            "difficulty": "easy",
            "tags": "Composition API,Reactivity:Core"
          },
          "zh-CN": {
            "title": "ref 全家桶",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            }
          }
        }
      },
      {
        "path": "243-prevent-event-propagation",
        "quizLink": "https://sfc.vuejs.org/#eNqFjtEKgyAYRl/lw5vqpliXw2J7D2/CScRMJa2b6N2nuWSMoAtB/uPxPyt5GlMusyB3Qi2fBuNghZsNZKf6hhFnGWnZxFQ4XCvrwOXA3zc0yAs0LdZAgMC0FKXUfZ7FJ1kR0HZi19d2/WfTKualGOrEaGTnxD4B6GtY8Nhd3x0L8uJbj1Ne/3IfEWYYxSFU3jg+T3dapb1k+wCXbmrQ",
        "no": 243,
        "readme": {
          "en": "In this challenge,you should make the click event's propagation to be stopped,let's go 👇: \n\n\n```vue\n<script setup lang=\"ts\">\n\nconst click1 = () => {\n  console.log('click1')\n}\n\nconst click2 = () => {\n  console.log('click2')\n}\n\n</script>\n\n<template>\n  <div @click=\"click1()\">\n   <div @click=\"click2()\">\n     click me\n   </div>\n  </div>\n</template>\n```",
          "zh-CN": "在这个挑战中，你需要阻止点击事件的冒泡，让我们开始吧。\r\n\r\n```vue\r\n<script setup lang=\"ts\">\r\n\r\nconst click1 = () => {\r\n  console.log('click1')\r\n}\r\n\r\nconst click2 = () => {\r\n  console.log('click2')\r\n}\r\n\r\n</script>\r\n\r\n<template>\r\n  <div @click=\"click1()\">\r\n   <div @click=\"click2()\">\r\n     click me\r\n   </div>\r\n  </div>\r\n</template>\r\n```"
        },
        "info": {
          "en": {
            "difficulty": "easy",
            "title": "prevent event propagation",
            "tags": "Event Handling",
            "author": {
              "github": "murongg",
              "name": "木荣"
            }
          },
          "zh-CN": {
            "difficulty": "easy",
            "title": "阻止事件冒泡",
            "tags": "Event Handling",
            "author": {
              "github": "murongg",
              "name": "木荣"
            }
          }
        }
      },
      {
        "path": "3-losing-reactivity",
        "quizLink": "https://sfc.vuejs.org/#eNqFkctOxDAMRX/FyoYZzaOwrVoEQvxFNqX1QETrRIlTCVX9d9yklJnV7Gz5+lw/JvXq3HmMqEpVhdYbxxCQo4O+oc9aKw5aPWsyg7OeYQKPTctmRJjh4u0AWkmzVpo0XSJJyRLEgG82Eu/2MGkCaC0FwXLDCPVG2KXaUhVpCY/HJZ33Cwngn+U6aduNTR+xBIrDB/oVCxl5TgABJ02CZIaXPTzdaJMHrNBsqCnJiwLeKUSPwF8IHQb2sZV+7MB569CzwQCdpQeG3oYkM/5vGcM/mvKaU3YqJciDzcfVT05WX91mca2KfHO5sCSMg+tFKBlA1ZkxBRK6NZAwuIbgpe1N+y3fWa+TjE5Pe3nVSZAi2RqmbQxZ8y7jkBiHG0ZVZPuqyBNVxdWcav4F8XfDrg==",
        "no": 3,
        "readme": {
          "en": "In `JavaScript`, we always destructure/spread objects.\n\nIn `Vue.js`, we can also destructure/spread the `reactive` objects, but they will end up losing their reactivity.\n\nHow can we make sure that the destructured properties maintain their reactivity? Go ! \n\n\n```vue\n<script setup lang=\"ts\">\nimport { reactive } from \"vue\"\n\nfunction useCount() {\n  const state = reactive({\n    count: 0,\n  })\n\n  function update(value: number) {\n    state.count = value\n  }\n\n  return {\n    state,\n    update,\n  }\n}\n\n// Ensure the destructured properties don't lose their reactivity\nconst { state: { count }, update } = useCount()\n\n</script>\n\n<template>\n  <div>\n    <p>\n      <span @click=\"update(count-1)\">-</span>\n      {{ count }}\n      <span @click=\"update(count+1)\">+</span>\n    </p>\n  </div>\n</template>\n\n```",
          "zh-CN": "在 `JavaScript` 中，我们经常解构/扩展对象。\n\n在`Vue.js`中，我们同样解构/扩展“响应式”对象，但它会失去响应性。\n\n如何保证解构/扩展不丢失响应性 ? 让我们开始吧 ！\n\n```vue\n<script setup lang=\"ts\">\nimport { reactive } from \"vue\"\n\nfunction useCount() {\n  const state = reactive({\n    count: 0,\n  })\n\n  function update(value: number) {\n    state.count = value\n  }\n\n  return {\n    state,\n    update,\n  }\n}\n\n// 确保解构不丢失响应性\nconst { state: { count }, update } = useCount()\n\n</script>\n\n<template>\n  <div>\n    <p>\n      <span @click=\"update(count-1)\">-</span>\n      {{ count }}\n      <span @click=\"update(count+1)\">+</span>\n    </p>\n  </div>\n</template>\n\n```"
        },
        "info": {
          "en": {
            "title": "losing-reactivity",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            },
            "difficulty": "easy",
            "tags": "Composition API,Reactivity:Utilities"
          },
          "zh-CN": {
            "title": "响应性丟失",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            }
          }
        }
      },
      {
        "path": "305-capitalize",
        "quizLink": "https://sfc.vuejs.org/#eNo9zDsKgDAQhOGrLNurvUTBe6QJukUg6qIT8YF3V6NYzjfwH9yo5ksULtnM7eQVNAui1naygyleSiMBpNfgIEmIjB80grCpVJYhKyzTkvVjJyFvnXq44Pfnu734mn+Dzwtrey1F",
        "no": 305,
        "readme": {
          "en": "Create a custom modifier for the 'v-model' directive that changes the first letter of the 'v-model' binding value to uppercase.\r\n\r\n```vue\r\n<script setup>\r\n</script>\r\n\r\n<template>\r\n  <input type=\"text\" v-model.capitalize=\"\" />\r\n</template>\r\n```",
          "zh-CN": "请创建一个自定义的修饰符 `capitalize`，它会自动将 `v-model` 绑定输入的字符串值首字母转为大写：\n```vue\n<script setup>\n</script>\n\n<template>\n  <input type=\"text\" v-model.capitalize=\"\" />\n</template>\n```"
        },
        "info": {
          "en": {
            "difficulty": "easy",
            "title": "Capitalize",
            "tags": "Directives",
            "author": {
              "github": "heappynd",
              "name": "Lov`u`e"
            }
          },
          "zh-CN": {
            "difficulty": "easy",
            "title": "大写",
            "tags": "Directives",
            "author": {
              "github": "heappynd",
              "name": "Lov`u`e"
            }
          }
        }
      },
      {
        "path": "323-prop-validation",
        "quizLink": "https://sfc.vuejs.org/#eNqNjs0KwjAQhF9l2ZNCae4lFPQJfIBc/NlCwSRLshEk5N0liSiIhx5ndr+ZyXhgHh+JcEIdr2FlgUiSeDbBuNWyDwLHJOIdLMFbMDiqritlsL5p1cnGNEPI8v0s1BwA3QnVpFafKw74zfq74EbL6ugUPMdd7mHyZJogl6HKst824NJq5t6m1Vv+zikvE+Rixg==",
        "no": 323,
        "readme": {
          "en": "Please validate the `type` prop of the `Button` component. it's accept the following strings `primary | ghost | dashed | link | text | default` only and the default value is `default`.",
          "zh-CN": "请验证`Button`组件的`Prop`类型 ，使它只接收: `primary | ghost | dashed | link | text | default` ，且默认值为`default`。"
        },
        "info": {
          "en": {
            "difficulty": "easy",
            "title": "Prop Validation",
            "tags": "Components",
            "author": {
              "github": "heappynd",
              "name": "Lov`u`e"
            }
          },
          "zh-CN": {
            "difficulty": "easy",
            "title": "Prop验证",
            "tags": "Components",
            "author": {
              "github": "heappynd",
              "name": "Lov`u`e"
            }
          }
        }
      },
      {
        "path": "4-writable-computed",
        "quizLink": "https://sfc.vuejs.org/#eNpVkM1ugzAQhF9l5BOBCNT2VgFSH6DqoVcfcGCTooKx7DU5IN695k9Nbt7Zb2a9O4kPY9LRk3gXuattaxiO2Bt0St8KKdhJUUrd9mawjAmWrmfUQ288U4MZVzv0kCIkSCG11PWgHQfAa0ax0NHL6VBN592XpqAfAVF0QlFueDqqzhMSLAapsziWGjE+1S+BfwjVbq9wty2rS0fpCnwPoa0Yd0KtNG7EK27J+Y4fXDzgQng7Q+kG1TryEF9DUpwtU3d6+0uSLFKebXcJVwgFU286xRQqIG/acX2Epymnad97nvPMPOnH5v+dPNu8efaQKOY/KqWIAA==",
        "no": 4,
        "readme": {
          "en": "For this challenge, you will need to create a writable computed ref : \n\n```vue\n<script setup lang=\"ts\">\nimport { ref, computed } from \"vue\"\n\nconst count = ref(1)\nconst plusOne = computed(() => count.value + 1)\n\n/**\n * Make the `plusOne` writable.\n * So that we can get the result `plusOne` to be 3, and `count` to be 2.\n*/\n\nplusOne.value++\n\n</script>\n\n<template>\n  <div>\n    <p>{{ count }}</p>\n    <p>{{ plusOne }}</p>\n  </div>\n</template>\n\n```",
          "zh-CN": "在这个挑战中，你需要创建一个可写的计算属性 :\n\n```vue\n<script setup lang=\"ts\">\nimport { ref, computed } from \"vue\"\n\nconst count = ref(1)\nconst plusOne = computed(() => count.value + 1)\n\n/**\n * 确保 `plusOne` 可以被写入。\n * 最终我们得到的结果应该是 `plusOne` 等于 3 和 `count` 等于 2。\n*/\n\nplusOne.value++\n\n</script>\n\n<template>\n  <div>\n    <p>{{ count }}</p>\n    <p>{{ plusOne }}</p>\n  </div>\n</template>\n\n```"
        },
        "info": {
          "en": {
            "title": "writable-computed",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            },
            "difficulty": "easy",
            "tags": "Composition API,Reactivity:Core"
          },
          "zh-CN": {
            "title": "可写的计算属性",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            }
          }
        }
      },
      {
        "path": "5-watch-family",
        "quizLink": "https://sfc.vuejs.org/#eNqFk11rwjAUhv/KIVdVxKq7GVKFIexuDIawm9zUeqyZMQ1N6hil/30nH1Unc7tLTt6T933y0bInrcenBtmcZaaohbZg0DYaZK7KBWfWcLbkShx1VVtoocbdCD5zW+yhg11dHYEzaueMK66KShkLRdUoCwsnTSYDV0+HQ65gCKt9LiWqEmE6h3e/SaUK9Gsv+QHBNDWC3WN0KEi+yYsDqeQX2FqUJdYm9gxTrrws8YYjSAawWEJLu1EEZSqJY1mVCWevV924De2MgnU+nO8en3LZIIWeckX8a3HEqrFJ2PKnYnYHaXZG2nxgYf+HEuYSKuCE8zM2t87InV+kIf85TEZ95IDtdX9gr8nSa8bhRhq9pcn2Cj2serCoIbzf6R7msOqDP8vG7IHOSKjyBvMkjCAPjxv9ACW+4S4Q9oyhFiEpS6jmZBRK7pADJdXuMoZdAkCEIvnlLh+dYZaGd02vmCYWj1pSLJoBZFtx8gMa6jgAaNv4hLsurqX9YqZdOvoWkcl9jXOTS3/bkqXBIkuvjFn3DXXSKT8=",
        "no": 5,
        "readme": {
          "en": "For this challenge, you'll use `Reactivity API: watch` to complete the challenge. \nHere's what you need to implement 👇: \n\n```vue\n<script setup lang=\"ts\">\nimport { ref, watch } from \"vue\"\n\nconst count = ref(0)\n\n/**\n * Challenge 1: Watch once\n * Make sure the watch callback is only triggered once\n*/\nwatch(count, () => {\n  console.log(\"Only triggered once\")\n})\n\ncount.value = 1\nsetTimeout(() => count.value = 2)\n\n/**\n * Challenges 2: Watch object\n * Make sure the watch callback is triggered\n*/\nconst state = ref({\n  count: 0,\n})\n\nwatch(state, () => {\n  console.log(\"The state.count updated\")\n})\n\nstate.value.count = 2\n\n/**\n * Challenge 3: Callback Flush Timing\n * Make sure visited the updated eleRef\n*/\n\nconst eleRef = ref()\nconst age = ref(2)\nwatch(age, () => {\n  console.log(eleRef.value)\n})\nage.value = 18\n\n</script>\n\n<template>\n  <div>\n    <p>\n      {{ count }}\n    </p>\n    <p ref=\"eleRef\">\n      {{ age }}\n    </p>\n  </div>\n</template>\n\n```",
          "zh-CN": "在这个挑战中，你将使用 `响应式 API: watch` 来完成它。\n以下是你要实现的内容 👇: \n\n```vue\n<script setup lang=\"ts\">\nimport { ref, watch } from \"vue\"\n\nconst count = ref(0)\n\n/**\n * 挑战 1: Watch 一次\n * 确保副作用函数只执行一次\n*/\nwatch(count, () => {\n  console.log(\"Only triggered once\")\n})\n\ncount.value = 1\nsetTimeout(() => count.value = 2)\n\n/**\n * 挑战 2: Watch 对象\n * 确保副作用函数被正确触发\n*/\nconst state = ref({\n  count: 0,\n})\n\nwatch(state, () => {\n  console.log(\"The state.count updated\")\n})\n\nstate.value.count = 2\n\n/**\n * 挑战 3: 副作用函数刷新时机\n * 确保正确访问到更新后的`eleRef`值\n*/\n\nconst eleRef = ref()\nconst age = ref(2)\nwatch(age, () => {\n  console.log(eleRef.value)\n})\nage.value = 18\n\n</script>\n\n<template>\n  <div>\n    <p>\n      {{ count }}\n    </p>\n    <p ref=\"eleRef\">\n      {{ age }}\n    </p>\n  </div>\n</template>\n\n```"
        },
        "info": {
          "en": {
            "title": "watch family",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            },
            "difficulty": "easy",
            "tags": "Composition API,Reactivity:Core"
          },
          "zh-CN": {
            "title": "watch 全家桶",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            }
          }
        }
      },
      {
        "path": "6-shallow-ref",
        "quizLink": "https://sfc.vuejs.org/#eNpNkE9rhDAQxb/KIydXFkN7XHSh0Gtb6J9bLqnOurIxCSauFPG7d9QVvM0w7/3mzYzixfvs3pM4iTyUXeMjAsXew2hbF0rEoMRZ2ab1rosYEa7aGDd80uWIQcfyigmXzrVQgilKKKts6WxgTNSRUOwcyYjS9Tae8ITpMCulxKujgPePb8SuqWvqlF2wyWI/IjmgOGNUFuy1wRnKjKsTJb7mebbw8OMrbiolGDodOWVF5E9M7GlblKaMSPHmqubyh3glxlWE4LjWEQP32qLVN1qG62klJ//V5W3LlimbSsXHzavv2vRbgALP85Zcri/kh3ETqfWGldwBedXcl4JL/yiAkR+6u2OaHgq5SnK5unK5Y4npH/zDlNM=",
        "no": 6,
        "readme": {
          "en": "For this challenge, you'll use `Reactivity API: shallowRef` to complete the challenge. \nHere's what you need to implement 👇: \n\n```vue\n<script setup lang=\"ts\">\nimport { shallowRef, watch } from \"vue\"\n\nconst state = shallowRef({ count: 1 })\n\n// Does NOT trigger\nwatch(state, () => {\n  console.log(\"State.count Updated\")\n}, { deep: true })\n\n/**\n * Modify the code so that we can make the watch callback trigger.\n*/\nstate.value.count = 2\n\n</script>\n\n<template>\n  <div>\n    <p>\n      {{ state.count }}\n    </p>\n  </div>\n</template>\n\n```",
          "zh-CN": "在这个挑战中，你将使用 `响应式 API: shallowRef` 来完成它。\n以下是你要实现的内容 👇: \n\n```vue\n<script setup lang=\"ts\">\nimport { shallowRef, watch } from \"vue\"\n\nconst state = shallowRef({ count: 1 })\n\n// 回调没被触发\nwatch(state, () => {\n  console.log(\"State.count Updated\")\n}, { deep: true })\n\n/**\n * 修改以下代码使watch回调被触发\n *\n*/\nstate.value.count = 2\n\n</script>\n\n<template>\n  <div>\n    <p>\n      {{ state.count }}\n    </p>\n  </div>\n</template>\n\n```"
        },
        "info": {
          "en": {
            "title": "shallow ref",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            },
            "difficulty": "easy",
            "tags": "Composition API,Reactivity:Advanced"
          },
          "zh-CN": {
            "title": "浅层 ref",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            }
          }
        }
      },
      {
        "path": "9-dependency-injection",
        "quizLink": "https://sfc.vuejs.org/#eNqFkMFugzAQRH9l5BNREJBrBZGinvoPPgSZJXELtmUWLoh/7wJpVPXQnOzxjNZvZ1aXELJpJPWmysFEGxgD8RjQ1e5WacWDVmftbB98ZMyI1KYI0U+2ISxoo++hlQzQ6pl6v9uu+bGyfJPrH2vEeDcwjB8do1qnJaeDdo+BiVabo1W6R8QSmg/HFKe6S5IDqjNm7bDbmTyOdDxqt6Q4FUUh+TLf1xBoEUx96GomUUC5g+UiyvyXo1L1ZHzRQ57j0jSoESwZgm8FRIpgj77+kvNOuG5oV2xsuBHDuk8yTI1cJLhmzAZivPTlSPb4F3ueH30ty1/w5Rt0TZvK",
        "no": 9,
        "readme": {
          "en": "For this challenge, you'll use the `Composition API: Dependency Injection` to complete the challenge. \nHere's what you need to implement 👇: \n\n```vue\n// Child.vue \n\n<script setup lang=\"ts\">\n// Add a piece of code to make the `count` value get injected into the child component.\n</script>\n\n<template>\n  {{ count }}\n</template>\n```",
          "zh-CN": "在这个挑战中，你将使用 `组合式 API: 依赖注入` 来完成它。\n以下是你要实现的内容 👇: \n\n```vue\n// Child.vue \n\n<script setup lang=\"ts\">\n// 添加代码,使`count`值注入子组件\n</script>\n\n<template>\n  {{ count }}\n</template>\n```"
        },
        "info": {
          "en": {
            "title": "Dependency Injection",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            },
            "difficulty": "easy",
            "tags": "Composition API"
          },
          "zh-CN": {
            "title": "依赖注入",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            }
          }
        }
      }
    ],
    "medium": [
      {
        "path": "12-optimize-perf-directive",
        "quizLink": "https://sfc.vuejs.org/#eNpNjTEOgzAQBL+ycgUiIqRFgJQyRX7gxkJHggKHZc40lv8eW6RIuavZnaDu1taHJ9Wqbh/dbAU7ibeD5nm1mxMEOJoQMblthVaJ1Uqz5nHjXTBungV9ZoqmzH2aP1jIHWYpihL9gKAZJ1in0lNVaY4X3JomL7rr6U3GFIRWuxihlIBut4aHp/kQZgHTQQ7j2/CLWoTwc8eYHjKXr/7mKn4BPe9M6A==",
        "no": 12,
        "readme": {
          "en": "`Vue.js` provides a directive that renders the element and the component only once, and skips future updates.\n\nDo you know what the directive is?. Lets try it 👇: \n\n```vue\n<script setup>\nimport { ref } from \"vue\"\n\nconst count = ref(0)\n\nsetInterval(() => {\n  count.value++\n}, 1000)\n</script>\n\n<template>\n  <span>Make it not to change: {{ count }}</span>\n</template>\n\n```",
          "zh-CN": "`Vue.js` 提供了一个指令，以便只渲染一次元素和组件，并且跳过以后的更新。\n\n你知道它是什么吗 ? 让我们试试👇:\n\n```vue\n<script setup>\nimport { ref } from \"vue\"\n\nconst count = ref(0)\n\nsetInterval(() => {\n  count.value++\n}, 1000)\n</script>\n\n<template>\n  <span>使它从不更新: {{ count }}</span>\n</template>\n\n```"
        },
        "info": {
          "en": {
            "title": "Optimize performance directive",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            },
            "difficulty": "medium",
            "tags": "Directives,Built-ins"
          },
          "zh-CN": {
            "title": "优化性能的指令",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            }
          }
        }
      },
      {
        "path": "15-useToggle",
        "quizLink": "https://sfc.vuejs.org/#eNpNT81OhDAQfpUvveASI3dSVr1s4kE96M16qM0sEkrb0EFjCO9uKRuylzYz8/3O4jGEu5+JRC1kNGMXGJF4CrDatU3BsTgqp1xVlsqhxNMQLA3kGBrGD8FH/WUJ58kZ7rwDf2sG+7a1FNNAiKyZMvVZ95RXO/jXj31SGUcybP+UKyvl9uMU6T3r3BwwrxGW9THeRcZHVr29GH2iuUKftY10WLGy2grlApIpRU+sNAEyHN9WiRrzvEXEPYrXlwJ1+k6nAssiq3DB4sHYzvSNEpuhEvkAbJZ7R2wUWV15ieUfKuF7FA==",
        "no": 15,
        "readme": {
          "en": "For this challenge, we'll start by creating a composable function. Lets start with `useToggle` 👇: \n\n\n```vue\n<script setup lang='ts'>\n\n/**\n * Implement a composable function that toggles the state\n * Make the function work correctly\n*/\nfunction useToggle() {\n\n}\n\nconst [state, toggle] = useToggle(false)\n\n</script>\n\n<template>\n  <p>State: {{ state ? 'ON' : 'OFF' }}</p>\n  <p @click=\"toggle\">\n    Toggle state\n  </p>\n</template>\n\n```",
          "zh-CN": "这个挑战开始,我们将尝试编写可组合函数，让我们从`useToggle`开始 👇:\n\n```vue\n<script setup lang='ts'>\n\n/**\n * 实现一个切换状态的可组合函数\n * 确保该功能正常工作\n*/\nfunction useToggle() {\n\n}\n\nconst [state, toggle] = useToggle(false)\n\n</script>\n\n<template>\n  <p>State: {{ state ? 'ON' : 'OFF' }}</p>\n  <p @click=\"toggle\">\n    Toggle state\n  </p>\n</template>\n\n```"
        },
        "info": {
          "en": {
            "title": "useToggle",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            },
            "difficulty": "medium",
            "tags": "Composable Function"
          },
          "zh-CN": {
            "title": "切换器",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            }
          }
        }
      },
      {
        "path": "16-until",
        "quizLink": "https://sfc.vuejs.org/#eNpNkc9uwyAMxl/FyqVJWiWZepuSatuth70BF4TcDpUAAtNpqvruM6TZekL298N/Pt+qd++7a8LqtRqjCtoTRKTkwUh7njYUNwdh9exdILhBwBPc4RTcDKLiX6ISVljlbCRQLlmCKTP10OR837bCQgvH2RuckVX6QmBKGzglq0g7pto+s2u8yLW2mrQ0Ddy4wh8M5D6wvkqTsChZuy9P4KGDXXAo3O6hFkDGH6v+62irAsqI9aNBmb0rhXmDIafYhaMlDJysGZsOa+0ndrstPXbwMgx5ZQD5LTU9dihg05WZ90XNRjmDnXHnRV1bThPsG+h7+JQXhJgCFqtcIp8IdAQKbPayytgvd+K7cEDI5kpCjgBGD2/KaHWZRLWuKKoiARzXRAZ7z9mxf/pd3X8BOR2zCw==",
        "no": 16,
        "readme": {
          "en": "We always need to rely on the asynchronous return result in order to do something, and the `until` function is so useful in this scenario. Can you do it? Lets try it 👇:\n\n\n```vue\n<script setup lang='ts'>\nimport { ref } from \"vue\"\n\nconst count = ref(0)\n\n/**\n * Implement the until function\n*/\n\nfunction until(initial) {\n  function toBe(value) {\n\n  }\n\n  return {\n    toBe,\n  }\n}\n\nasync function increase() {\n  count.value = 0\n  setInterval(() => {\n    count.value++\n  }, 1000)\n  await until(count).toBe(3)\n  console.log(count.value === 3) // Make sure the output is true\n}\n\n</script>\n\n```",
          "zh-CN": "有些时候，我们需要依赖于异步的返回结果做一些后续处理，`until`函数在这种场景下非常有用，你能实现它吗 ? 让我们来试试吧 👇:\n\n\n```vue\n<script setup lang='ts'>\nimport { ref } from \"vue\"\n\nconst count = ref(0)\n\n/**\n * 实现`until`函数\n*/\n\nfunction until(initial) {\n  function toBe(value) {\n\n  }\n\n  return {\n    toBe,\n  }\n}\n\nasync function increase() {\n  count.value = 0\n  setInterval(() => {\n    count.value++\n  }, 1000)\n  await until(count).toBe(3)\n  console.log(count.value === 3) // 确保输出为true\n}\n\n</script>\n\n```"
        },
        "info": {
          "en": {
            "title": "until",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            },
            "difficulty": "medium",
            "tags": "Utility Function"
          },
          "zh-CN": {
            "title": "until",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            }
          }
        }
      },
      {
        "path": "17-useCounter",
        "quizLink": "https://sfc.vuejs.org/#eNqFUD1PwzAQ/SunLNCoImWNkgJiYkBMMHlxzRWsOo5ln/lQ5P/O2SlRkSqxRDm/j3vvpurOuauPiFVbdUF57QgCUnRgpH3rLyhcbIUVVltCv5cK4Tng/Rjz+ORIjzbAJCzAoO1NCzYOO/Rlll8nc8oeTV0zUsPD4AwOaAnoHUGNgxuD3BmEfbQqWxbWozwghOixsH4h+Bz9IbDIe1RkvoWtG2EXNC7hLrXVpKV5kSYi9LBZwzjnbc9U6GFKq1zkGFXxI8HEe5i2Bm3VGl6RPx75OpBYcLKKvad8gDZv4eItXG8grbJR18xHLUfsCLm6JOQJoHPbYtDCdFwEKXWNm8FdJOJCt8podehFxRFEVSDIcQqnmUnnBRx3EeT/fwWl2iKZp7+irjkpUKUffqLGcw==",
        "no": 17,
        "readme": {
          "en": "For this challenge, we're going to implement a counter. 👇: \n\n\n```vue\n<script setup lang='ts'>\n\ninterface UseCounterOptions {\n  min?: number\n  max?: number\n}\n\n/**\n * Implement the composable function\n * 1. inc (+)\n * 2. dec (-)\n * 3. reset \n * 4. min & max opotion support\n * Make sure the function works correctly\n*/\nfunction useCounter(initialValue = 0, options: UseCounterOptions = {}) {\n\n}\n\nconst { count, inc, dec, reset } = useCounter(0, { min: 0, max: 10 })\n\n</script>\n\n```",
          "zh-CN": "在这个挑战中，我们将实现一个计数器。 👇: \n\n\n```vue\n<script setup lang='ts'>\n\ninterface UseCounterOptions {\n  min?: number\n  max?: number\n}\n\n/**\n * 实现计数器函数,确保功能正常工作\n * 1. 加 (+)\n * 2. 减 (-)\n * 3. 重置 \n * 4. 最小值 & 最大值 选项支持\n*/\nfunction useCounter(initialValue = 0, options: UseCounterOptions = {}) {\n\n}\n\nconst { count, inc, dec, reset } = useCounter(0, { min: 0, max: 10 })\n\n</script>\n\n```"
        },
        "info": {
          "en": {
            "title": "useCounter",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            },
            "difficulty": "medium",
            "tags": "Composable Function"
          },
          "zh-CN": {
            "title": "计数器",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            }
          }
        }
      },
      {
        "path": "18-useLocalStorage",
        "quizLink": "https://sfc.vuejs.org/#eNqFkUFvwjAMhf+KlQtQIbpdK5jEcdJ2mrRdcgmdySJSp0ocUIX473NamNAuXP3e+/wsn9W271fHjKpR69RG1zMk5NyDN2Q3M06zF02aXNeHyHCGiHu4wD6GDrSSnFZFrqtKE1Tw2vUeOyQG/kFog6SS2XmEfaaWXRCruN7NASHliKPrJsEpxEOSUIzYsh80VbWmPzUnfAut8R8corE4P+DQQOLoyC7BkWNn/KfxGRswNCzgLKsERonhWMawKd3n985FqQ4y5hxpcmm6lOGUa0MmxijJ/8u1umpaLeFp5NQ1fMnJhsAig79zw24A6WktlrLjzWKRcDMtCh5XPtj5Fbkai9yYW/qG08Q1PoXynEdwsUzwgr9Dyh3PZbiup0fLY9XlF+VXuSw=",
        "no": 18,
        "readme": {
          "en": "We often need to use the `localStorage` API. A composable function will help us use it better. Lets go. 👇: \n\n\n```vue\n<script setup lang='ts'>\n\nimport { ref } from \"vue\"\n\n/**\n * Implement the composable function\n Make sure the function works correctly\n*/\nfunction useLocalStorage(key: string, initialValue: any) {\n  const value = ref(initialValue)\n\n  return value\n}\n\nconst counter = useLocalStorage(\"counter\", 0)\n\n// We can get the localStorage by triggering the getter:\nconsole.log(counter.value)\n\n// And we also can set the localStorage by triggering the setter:\n\ncounter.value = 1\n\n</script>\n\n```",
          "zh-CN": "我们经常需要使用`localStorage`API，一个好用的可组合函数封装将帮助我们更好地使用它，让我们开始吧 👇: \n\n\n```vue\n<script setup lang='ts'>\n\nimport { ref } from \"vue\"\n\n/**\n * 实现`useLocalStorage`函数\n*/\nfunction useLocalStorage(key: string, initialValue: any) {\n  const value = ref(initialValue)\n\n  return value\n}\n\nconst counter = useLocalStorage(\"counter\", 0)\n\n// 我们可以通过触发`counter`的`getter`来获取本地存储的值\nconsole.log(counter.value)\n\n// 同样地,我们也可以通过触发`counter`的`setter`来设置本地存储的值\n\ncounter.value = 1\n\n</script>\n\n```"
        },
        "info": {
          "en": {
            "title": "useLocalStorage",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            },
            "difficulty": "medium",
            "tags": "Composable Function"
          },
          "zh-CN": {
            "title": "实现本地存储函数",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            }
          }
        }
      },
      {
        "path": "19-v-focus",
        "quizLink": "https://sfc.vuejs.org/#eNpNUDFOxDAQ/MriJrkILhElSk6iQbqClspNyG1yFo5t2esAivJ31g7SXWNpdmfGM7uKV+eOS0TxItoweOUIAlJ0oHszdQWF4iSNmp31BCt4HGGD0dsZpGCVFNJIM1gTWEY9IXSJU469DnhIu7qqpIEKzrPTOKMhoCvCEAOxx0V5HEgtmCnv/RdCiB4zRRkXCfBfNFqWYKg/dfQBvq9oMqnInxagApCdJo2X5CRNVd9yfbwlLQdb02xLDzc8G0K/9LosD9Cd0g72BkcextTj4Q6y7hGem6bJndp6vxRfhgEhV2MmI4B2j7085cCdFNlECqBfhwwJf0gKprb1nU5sf6sriZM=",
        "no": 19,
        "readme": {
          "en": "For this challenge, we'll start by creating a custom directive. Lets start with `v-focus` 👇: \n\n```vue\n<script setup lang='ts'>\nimport { ref } from \"vue\"\n\nconst state = ref(false)\n\n/**\n * Implement the custom directive\n * Make sure the input element focuses/blurs when the 'state' is toggled\n *\n*/\n\nconst VFocus = {\n\n}\n\nsetInterval(() => {\n  state.value = !state.value\n}, 2000)\n\n</script>\n\n<template>\n  <input v-focus=\"state\" type=\"text\">\n</template>\n\n```",
          "zh-CN": "这个挑战开始，我们将尝试编写自定义指令，让我们从`v-focus`开始 👇:\n\n```vue\n<script setup lang='ts'>\nimport { ref } from \"vue\"\n\nconst state = ref(false)\n\n/**\n * 实现一个自定义指令,让元素获取焦点\n * 确保当切换`state`时,元素随着状态值获取/失去焦点\n *\n*/\nconst VFocus = {\n\n}\n\nsetInterval(() => {\n  state.value = !state.value\n}, 2000)\n\n</script>\n\n<template>\n  <input v-focus=\"state\" type=\"text\">\n</template>\n\n```"
        },
        "info": {
          "en": {
            "title": "v-focus",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            },
            "difficulty": "medium",
            "tags": "Directives"
          },
          "zh-CN": {
            "title": "切换焦点指令",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            }
          }
        }
      },
      {
        "path": "20-v-debounce-click",
        "quizLink": "https://sfc.vuejs.org/#eNqVUT1rwzAQ/SsPLUkMsUPH4BRCu3Qo3Tp5sGNfHRFZUq1Tign575XkFArtkkWgd0/v43QRe2vzsyexFaVrR2kZjthbqEb3uwW7xWOlK11kWaWR4WWwigbSDD4SWu/YDOjkSC3LMyXKa3MiOD9SotRGPynZnmoMxEfTwWg1oSd24FH2PY0UsZbwdSSNNnIDMjR6AsuBHD59gNSUtPe6w2Q8GuUMNAUim+BlrRnnRB0djI9qHalmVoCxLI3OQXmP+rz+oayT13ZwdZSudFbEoq3RjvH+fCOl7NjhEmfXeHwEOOqF0Gm4XMUhEB8aRbky/bISb7HlnQXF6mZRFvNPpM2XTGHnDVO4AeXBMwfzPzUeNptdJW6ZKpHIwBw/8CX/v1KUxawYHpTFLytx/QaEuL/9",
        "no": 20,
        "readme": {
          "en": "For this challenge, we're going to implement a debounced-click-directive. Lets go 👇: \n\n```vue\n<script setup lang='ts'>\n\n/**\n  * Implement the custom directive\n * Make sure the `onClick` method only gets triggered once when clicked many times quickly\n * And you also need to support the debounce delay time option. e.g `v-debounce-click:ms`\n *\n*/\n\nconst VDebounceClick = {\n\n}\n\nfunction onClick() {\n  console.log(\"Only triggered once when clicked many times quickly\")\n}\n\n</script>\n\n<template>\n  <button v-debounce-click:200=\"onClick\">\n    Click on it many times quickly\n  </button>\n</template>\n\n```",
          "zh-CN": "在这个挑战中，我们将尝试实现一个节流点击指令，让我们开始吧 👇:\n\n```vue\n<script setup lang='ts'>\n\n/**\n * 实现以下自定义指令\n * 确保在一定时间内当快速点击按钮多次时只触发一次点击事件\n * 你需要支持节流延迟时间选项, 用法如 `v-debounce-click:ms`\n *\n*/\n\nconst VDebounceClick = {\n\n}\n\nfunction onClick() {\n  console.log(\"Only triggered once when clicked many times quicky\")\n}\n\n</script>\n\n<template>\n  <button v-debounce-click:200=\"onClick\">\n    Click on it many times quickly\n  </button>\n</template>\n\n```"
        },
        "info": {
          "en": {
            "title": "v-debounce-click",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            },
            "difficulty": "medium",
            "tags": "Directives"
          },
          "zh-CN": {
            "title": "节流点击指令",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            }
          }
        }
      },
      {
        "path": "21-functional-component",
        "quizLink": "https://sfc.vuejs.org/#eNptUctOwzAQ/JVRLrQVJMAxSipQuRRxgiPmYNJtY+Gso8RpK1X9d9YxfRw4JZ6Z3dnZPSTPbZtuB0rypOirzrQePfmhhdW8KW98fzNXrNg0res8DuhojSPWnWugEqlTSaCz2UwxZlg2raWG2ENjPXDljWNtUTkp5wDno+whxTvxijr4mmBN70GxrsdksJk1U+yMry/0Sns9lj6mWNQyGl0446mBp70XH+ukp5MpV9jVxKisqX5olSqeZYorx6J/k6LFeaISkynKOQ6KjyFK1IyNS3wKCrBuKJe4r65mldyK8DbIL8SLkz38g380EiIyX5feWtaypaXk34uFLHRyPw3saWESYLOxNDFBkYOH5pu6aex8VZtutR1IOoy6v+mLLB5xPFohi2mt9iQvoAiZ7s6nCBCQB7BUSfiEU45YNLkb+wp35XmSPMURhYw/Ec/Ep8iuTJPjL1eL0Q8=",
        "no": 21,
        "readme": {
          "en": "For this challenge, we're going to implement a functional component. Lets go 👇: \n\n```vue\n<script setup lang='ts'>\n\nimport { ref } from \"vue\"\n\n/**\n * Implement a functional component :\n * 1. Render the list elements (ul/li) with the list data\n * 2. Change the list item text color to red when clicked.\n*/\nconst ListComponent = () => {\n}\n\nconst list = [{\n  name: \"John\",\n}, {\n  name: \"Doe\",\n}, {\n  name: \"Smith\",\n}]\n\nconst activeIndex = ref(0)\n\nfunction toggle(index: number) {\n  activeIndex.value = index\n}\n\n</script>\n\n<template>\n  <list-component\n    :list=\"list\"\n    :active-index=\"activeIndex\"\n    @toggle=\"toggle\"\n  />\n</template>\n\n```",
          "zh-CN": "在这个挑战中，我们将尝试实现一个函数式组件，让我们开始吧 👇:\n\n```vue\n<script setup lang='ts'>\n\nimport { ref } from \"vue\"\n\n/**\n * 实现该函数式组件 :\n * 1. 使用`list`数据渲染列表元素 (ul/li)\n * 2. 当点击列表子元素时,将其文本颜色更改为红色\n*/\nconst ListComponent = () => {\n}\n\nconst list = [{\n  name: \"John\",\n}, {\n  name: \"Doe\",\n}, {\n  name: \"Smith\",\n}]\n\nconst activeIndex = ref(0)\n\nfunction toggle(index: number) {\n  activeIndex.value = index\n}\n\n</script>\n\n<template>\n  <list-component\n    :list=\"list\"\n    :active-index=\"activeIndex\"\n    @toggle=\"toggle\"\n  />\n</template>\n\n```"
        },
        "info": {
          "en": {
            "title": "functional component",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            },
            "difficulty": "medium",
            "tags": "Components"
          },
          "zh-CN": {
            "title": "函数式组件",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            }
          }
        }
      },
      {
        "path": "218-h-render-function",
        "quizLink": "https://sfc.vuejs.org/#eNpVkMtugzAQRX/lyhtIlMI+IlHbrPsHbAgMFNUPZA9VI8S/13ZMmlqyLN+58zqLeJum4nsmcRSVa+04MRzxPEE2ejjVgl0tzrWt9agmYxkft/eZ2Wj01ijUoig3pQjW4Ay3NdoxjL7Isf3CCfkOpzOWEAJC0EgqpBnyLHmyXYitW35V3oeJraPApCbZMEUFqB6DHLvRNVdJnZ+2b6SjWuC1nR0b9dKG0l5PTdIq8EfdcI35qdxjjeioyn/txEE8belRJRgLOupHTRfj/5o0Y924eKR/NOgn2r25mWV8n5PyhEU3io7Itk7Z4S5b0h1ZDzDZgsKz1fjMy/0enYEzinjUA/ZlpAhEjutOrL9D+qg5",
        "no": 218,
        "readme": {
          "en": "For this challenge, you need use `h` render function to implement a component. \r\n\r\nNote: You should make sure that the props are passed correctly, event is triggered correctly and the slot content is rendered correctly. Lets go.\r\n\r\n```vue\r\n<script setup lang=\"ts\">\r\nimport MyButton from \"./MyButton.ts\"\r\nconst onClick = () => {\r\n  console.log('onClick')\r\n}\r\n</script>\r\n\r\n<template>\r\n  <MyButton :disabled=\"false\" @custom-click=\"onClick\">\r\n    my button\r\n  </MyButton>\r\n</template>\r\n\r\n```",
          "zh-CN": "在这个挑战中，你需要使用`h`渲染函数来实现一个组件。\n\n请注意: 你应该确保参数被正确传递、事件被正常触发和插槽内容正常渲染。让我们开始吧。\n\n```vue\n<script setup lang=\"ts\">\nimport MyButton from \"./MyButton.ts\"\nconst onClick = () => {\n  console.log('onClick')\n}\n</script>\n<template>\n  <MyButton :disabled=\"false\" @custom-click=\"onClick\">\n    my button\n  </MyButton>\n</template>\n```"
        },
        "info": {
          "en": {
            "difficulty": "medium",
            "title": "render function[h()]",
            "tags": "Components",
            "author": {
              "github": "murongg",
              "name": "木荣"
            }
          },
          "zh-CN": {
            "difficulty": "medium",
            "title": "渲染函数[h()]",
            "tags": "Components",
            "author": {
              "github": "murongg",
              "name": "木荣"
            }
          }
        }
      },
      {
        "path": "232-key-modifiers",
        "quizLink": "https://sfc.vuejs.org/#eNqtkcFuwyAMhl/F49L2kEbrcWLRoj3CrrlkwSyoBBA4raKq7z4Ci7SqUpfDbhb+/5/P9oXVzu1PI7IXxgkHp1vCqvGNAeBPRQG1EHDECQYrlFToAwytQKBeBTgrrUEqj4AnNKAk1JrAevjolSSIilYHC85jCCigKFIw/xyJrIG3Tqvu+Nowa97n6rlhVc3L3E3KpF4FYY2eMsm5jyT5/9YIMBYs9ehne8SJghU05HUi+j+giBGmEPf7y7ESZq4OdyS8vDlWegqdV44gII3u54RyNB2pmLjseLu75A5AZ02wGvfafm03S3+zy+3rvX/ZyoOIRfIgJY3zB8Xhxs/LPFjFrt+RMe8U",
        "no": 232,
        "readme": {
          "en": "When listening for keyboard events, we often need to check for specific keys. Vue allows adding key modifiers for v-on or @ when listening for key events,e.g. :\r\n\r\n```vue\r\n<!-- only call `vm.submit()` when the `key` is `Enter` -->\r\n<input @keyup.enter=\"submit\" />\r\n```\r\n\r\nFor this challenges,we'll try something about it,let's go :\r\n\r\n```vue\r\n<template>\r\n  <!-- Add key modifiers made this will fire even if Alt or Shift is also pressed -->\r\n<button @click=\"onClick1\">A</button>\r\n\r\n<!-- Add key modifiers made this will only fire when Shift and no other keys are pressed -->\r\n<button @click=\"onCtrlClick\">A</button>\r\n\r\n<!-- Add key modifiers made this will only fire when no system modifiers are pressed -->\r\n<button @click=\"onClick2\">A</button>\r\n</template>\r\n```",
          "zh-CN": "在监听键盘事件时，我们经常需要检查特定的按键。Vue 允许为 v-on 或者 @ 在监听键盘事件时添加按键修饰符：，例如：\n\n```vue\n<!-- 只有在 `key` 是 `Enter` 时调用 `vm.submit()` -->\n<input @keyup.enter=\"submit\" />\n```\n\n在这个挑战中，我们将尝试它，让我们开始吧：\n\n```vue\n<template>\n  <!-- 添加按键修饰符让即使 Alt 或 Shift 被一同按下时也会触发 -->\n<button @click=\"onClick1\">A</button>\n\n<!-- 添加按键修饰符让有且只有 Shift 被按下的时候才触发 -->\n<button @click=\"onCtrlClick\">A</button>\n\n<!-- 添加按键修饰符让没有任何系统修饰符被按下的时候才触发 -->\n<button @click=\"onClick2\">A</button>\n</template>\n\n```"
        },
        "info": {
          "en": {
            "difficulty": "medium",
            "title": "Key Modifiers",
            "tags": "Event Handling",
            "author": {
              "github": "webfansplz",
              "name": "webfansplz"
            }
          },
          "zh-CN": {
            "difficulty": "medium",
            "title": "按键修饰符",
            "tags": "Event Handling",
            "author": {
              "github": "webfansplz",
              "name": "webfansplz"
            }
          }
        }
      },
      {
        "path": "25-useMouse",
        "quizLink": "https://sfc.vuejs.org/#eNqFj8FqxDAMRH9l8GkXTHJfkkAPPRTaP/DFddXFNJFNrGRbjP+9jgul0MNehJBGTzNZPcTY7RupixqSW30UJJItYrZ8HY2SZNRk2HDf42mJMy3Egq7rDL9v7MQHxpboca/jZ5+EmNaT2PVKokHHVMPZeX617uOMfJDKfdxLqOXU9PiPv3l+CzcNo5ZDt4SdjNKo+nFCLuf2wgVOgoxPjS8UjH+whof+J2tLNghVJ1ZoanvEkHwz4hOsXJArBKXoo6moMvS/B4ZV+QYVUnIE",
        "no": 25,
        "readme": {
          "en": "We should focus on reusability when using `Vue.js`. Composables are a great way to ensure this. Let's go 👇: \n\n\n```vue\n<script setup lang=\"ts\">\n\n// Implement ...\nfunction useEventListener(target, event, callback) {\n\n}\n\n// Implement ...\nfunction useMouse() {\n  useEventListener(window, \"mousemove\", () => {})\n}\nconst { x, y } = useMouse()\n</script>\n\n<template>Mouse position is at: {{ x }}, {{ y }}</template>\n\n\n```",
          "zh-CN": "在使用`Vue.js`时，我们应该关注可复用性，可组合函数是一个很好的方式，让我们开始吧 👇: \n\n\n```vue\n<script setup lang=\"ts\">\n\n// Implement ...\nfunction useEventListener(target, event, callback) {\n\n}\n\n// Implement ...\nfunction useMouse() {\n  useEventListener(window, \"mousemove\", () => {})\n}\nconst { x, y } = useMouse()\n</script>\n\n<template>Mouse position is at: {{ x }}, {{ y }}</template>\n\n\n```"
        },
        "info": {
          "en": {
            "title": "useMouse",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            },
            "difficulty": "medium",
            "tags": "Composable Function"
          },
          "zh-CN": {
            "title": "鼠标坐标",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            }
          }
        }
      },
      {
        "path": "27-global-css",
        "quizLink": "https://sfc.vuejs.org/#eNpNjz3PgjAQx7/KhdEEy/MkLrUxcXNxdXIBekKl9ppyiGj87tISE8f75f5vr2zv/fo+YCYzxXjztmTcnR2A8rsDWktwGnB97ZXwM1bi52c+e54sQl+TR52Ih1cUX8hx3psnyv/CP7YR1WQpyIA6XYwPzktrGiehRscYErbGYd6iaVqWsFmk7+grVnAsOwTDMFLoYCXOriI9LXGj0dxK+CuK+5h8vhaRtIlUZd01gQan86UJVEOw00gUC80ZSqQx84rs/QE4hmAY",
        "no": 27,
        "readme": {
          "en": "Sometimes, we may want to set global CSS in the scoped component. Do you know how to solve it?. Lets go 👇: \n\n```css\n<template>\n  <p>Hello Vue.js</p>\n</template>\n\n<style scoped>\n\np {\n  font-size:20px;\n  color:red;\n  text-align: center;\n  line-height: 50px;\n}\n\n/* Make it work */\nbody {\n  width: 100vw;\n  height: 100vh;\n  background-color: burlywood;\n}\n</style>\n```",
          "zh-CN": "有些时候，我们想在具有CSS作用域的`Vue`单文件组件设置全局CSS样式， 该怎么设置呢 ? 让我们开始吧 👇: \n\n```css\n<template>\n  <p>Hello Vue.js</p>\n</template>\n\n<style scoped>\n\np {\n  font-size:20px;\n  color:red;\n  text-align: center;\n  line-height: 50px;\n}\n\n/* 使其工作 */\nbody {\n  width: 100vw;\n  height: 100vh;\n  background-color: burlywood;\n}\n</style>\n```"
        },
        "info": {
          "en": {
            "title": "Global CSS",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            },
            "difficulty": "medium",
            "tags": "CSS Features"
          },
          "zh-CN": {
            "title": "全局CSS",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            }
          }
        }
      },
      {
        "path": "7-raw-api",
        "quizLink": "https://sfc.vuejs.org/#eNqlUbFugzAU/JWTpwRVoK4RVOrYoUu7enGJSa2CbeEHVYX49z5sSFCXDtnu5Lt79/wm8ex9Pg5anEQZ6t54QtA0eLTKXiopKEjxJK3pvOsJE3qtajKjfoAJbyvGjKZ3HaTgICmklbZ2NnASKdKo2Fa7wdIJj5i3ty3ofdVs/BBNxyWkyDJpkeHVnU3zA/rUnHPWCI6xInwzVxad+tLx0Q3kB8IHs37QubRZkaa5Vuetuxz+zKyq1PDOYY1qw34awdjG/bP2S5Jct14ssce+7+2Lr9UX3zEKyyLdi6/DhHTnW96FGVCezRgBQ78CYLpdL35AHtth5m5RWSRpWSR3WewyxfwLXYvBcA==",
        "no": 7,
        "readme": {
          "en": "For this challenge, you'll use `Reactivity API: [xx]Raw` to complete the challenge. \nHere's what you need to implement 👇: \n\n```vue\n<script setup lang=\"ts\">\nimport { reactive, isReactive } from \"vue\"\n\nconst state = { count: 1 }\nconst reactiveState = reactive(state)\n\n/**\n * Modify the code so that we can make the output be true.\n*/\nconsole.log(reactiveState === state)\n\n/**\n * Modify the code so that we can make the output be false.\n*/\nconst info = { count: 1 }\nconst reactiveInfo = reactive(info)\n\nconsole.log(isReactive(reactiveInfo))\n\n</script>\n\n<template>\n  <div>\n    <p>\n      {{ reactiveState.count }}\n    </p>\n  </div>\n</template>\n\n\n```",
          "zh-CN": "在这个挑战中，你将使用 `响应式 API: [xx]Raw` 来完成它。\n以下是你要实现的内容 👇: \n\n```vue\n<script setup lang=\"ts\">\nimport { reactive, isReactive } from \"vue\"\n\nconst state = { count: 1 }\nconst reactiveState = reactive(state)\n\n/**\n * 修改以下代码使输出为true\n*/\nconsole.log(reactiveState === state)\n\n/**\n * 修改以下代码使输出为false\n*/\nconst info = { count: 1 }\nconst reactiveInfo = reactive(info)\n\nconsole.log(isReactive(reactiveInfo))\n\n</script>\n\n<template>\n  <div>\n    <p>\n      {{ reactiveState.count }}\n    </p>\n  </div>\n</template>\n\n\n```"
        },
        "info": {
          "en": {
            "title": "Raw API",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            },
            "difficulty": "medium",
            "tags": "Reactivity:Advanced"
          },
          "zh-CN": {
            "title": "原始值 API",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            }
          }
        }
      },
      {
        "path": "8-effect-scope",
        "quizLink": "https://sfc.vuejs.org/#eNpdUctugzAQ/JWRT6RCQY16iiBSVPXQW6X26EMILAQVbMuP9ID49y6vJMrJ6x3PeGa3F0djttdAYi9SV9jGeDjywaDNVZ1J4Z0UB6mazmjr0cNSFaPQnQmeyhh/uS8uy/FRVVR4DKis7iAFq0ohlVSFVs4zKShPFtmoEb1u1n6pw7mlkvurbBRtkB1Wwvaat4Hwgh1TpEoSBEfwF8KJph+/C23ohOPXJ7xGl/9OKL+ZYQfntWGoJm5b5NXo4kyNquFtU9dk+XetChrlpyTR4inG6kQ53dK21fUKza42bOkh+834/bkU72OMPc8jXqPeueMMHkNm2I1N3sBP05EOq2IvFZ7mkeFNqmHSSJN5c7wnvnjqTJt74huQls11Krg0SwH0/W3qw7CgyQynycxIkwcdMfwDpH69fA==",
        "no": 8,
        "readme": {
          "en": "For this challenge, you'll use `Reactivity API: effectScope` to complete the challenge. \nHere's what you need to implement 👇: \n\n```vue\n<script setup lang=\"ts\">\nimport { ref, computed, watch, watchEffect } from \"vue\"\n\nconst counter = ref(1)\nconst doubled = computed(() => counter.value * 2)\n\n// use the `effectScope` API to make these effects stop together after being triggered once\n\nwatch(doubled, () => console.log(doubled.value))\nwatchEffect(() => console.log(\"Count: \", doubled.value))\n\ncounter.value = 2\n\nsetTimeout(() => {\n  counter.value = 4\n})\n\n</script>\n\n<template>\n  <div>\n    <p>\n      {{ doubled }}\n    </p>\n  </div>\n</template>\n\n\n```",
          "zh-CN": "在这个挑战中，你将使用 `响应式 API: effectScope` 来完成它。\n以下是你要实现的内容 👇: \n\n```vue\n<script setup lang=\"ts\">\nimport { ref, computed, watch, watchEffect } from \"vue\"\n\nconst counter = ref(1)\nconst doubled = computed(() => counter.value * 2)\n\n// 使用 `effectScope` API 使这些Effect效果在触发一次后停止\n\nwatch(doubled, () => console.log(doubled.value))\nwatchEffect(() => console.log(\"Count: \", doubled.value))\n\ncounter.value = 2\n\nsetTimeout(() => {\n  counter.value = 4\n})\n\n</script>\n\n<template>\n  <div>\n    <p>\n      {{ doubled }}\n    </p>\n  </div>\n</template>\n\n\n```"
        },
        "info": {
          "en": {
            "title": "effectScope API",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            },
            "difficulty": "medium",
            "tags": "Composition API,Reactivity:Advanced"
          },
          "zh-CN": {
            "title": "Effect作用域 API",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            }
          }
        }
      }
    ],
    "hard": [
      {
        "path": "208-tree-component",
        "quizLink": "https://sfc.vuejs.org/#eNqlU8FugzAM/RUvl3YSFG1HRCtN2wf0sFvpAYFp0SCgxJ00If59SRiQtLBNGwcIz37PyXPcsqem2bxfkIUskqkoGgKJdGmgTPhpGzOSMdvFIuZF1dSCoAWBOXSQi7qCmClmzKzwq0B8rtWaI6chaRM4sC7Xk9KaSwJSwZeEEthq7fWh1SGAN/wIYfWw8vpfKqhEBewToaVHPD0XZaagEAbiSPXHpIlu0id258EN63GJZQXmqloKduVJ5SQSnl1twN2CLWFVm5Ww4p13HI5jFpNkLzemXpk44ssmOkdZMPF7O5TCf+3QEn+z47q7jq0L3R1MPN7rTxT0Y2GGwACEVVMmhAYBiNw7H2bqKuvB+brVMYPAZEaBQ2Qeu5mKn4eQE4o8SdEMmhkau9GSRMFPTqttaOrSwD70J9WvDPOC417UjYxafQY7q9utf2nGne9DVoOsK6SzqrxRD/j+rAPdJyt6b6Q=",
        "no": 208,
        "readme": {
          "en": "For this challenge, you need to implement a tree component. Lets go.\r\n\r\n```vue\r\n<script setup lang=\"ts\">\r\ninterface TreeData {\r\n  key: string\r\n  title: string\r\n  children: TreeData[]\r\n}\r\ndefineProps<{data: TreeData[]}>()\r\n</script>\r\n\r\n<template>\r\n  <!-- do something.... -->\r\n</template>\r\n```",
          "zh-CN": "在这个挑战中，你需要实现一个树组件，让我们开始吧。\n\n```vue\n<script setup lang=\"ts\">\ninterface TreeData {\n  key: string\n  title: string\n  children: TreeData[]\n}\ndefineProps<{data: TreeData[]}>()\n</script>\n\n<template>\n  <!-- do something.... -->\n</template>\n```"
        },
        "info": {
          "en": {
            "difficulty": "hard",
            "title": "Tree Component",
            "tags": "Components",
            "author": {
              "github": "murongg",
              "name": "木荣"
            }
          },
          "zh-CN": {
            "difficulty": "hard",
            "title": "树组件",
            "tags": "Components",
            "author": {
              "github": "murongg",
              "name": "木荣"
            }
          }
        }
      },
      {
        "path": "22-custom-element",
        "quizLink": "https://sfc.vuejs.org/#eNpdkMFOwzAQRH9l8KVtJJI7clKBhNQiekOcfImSbZqS2Fa8LkJR/p1NghDiuOsZv9kZ1aP36S2SelA6VEPrGYE4enSlbfINh01hrLFt793AGOHsyUXLVGPCeXA9jBK3UbMoSxJjkeDY+456sgy+ECpXE9ihGqhkQokqBhYjrZp0sZzKDxGJ2kX2keHO8GVDCBf3KYgDdZ3De6T0GowSS5IZWzkbeF6+BOQi2u/3a47fjNvtDnmBURCoXRUXXkP8vKKfvo711qjSe6N2d2lrLQ2Ht9Pr8puWs+6vAT2FIElyY/7FkLnQ2aoqZvC0m+E6W2tcatNM0oWcLROg6/aGts5/kOKWhbzo7I9MTd+Fm4nR",
        "no": 22,
        "readme": {
          "en": "Have you heard about `Web Components` ? \n\nVue has excellent support for both creating and consuming custom elements. \n\nFor this challenge, you can try it out. Lets go 👇: \n\n```vue\n<script setup lang='ts'>\n\nimport { onMounted } from \"vue\"\n\n/**\n * Implement the code to create a custom element.\n * Make the output of page show \"Hello Vue.js\".\n*/\nconst VueJs = \"???\"\n\nonMounted(() => {\n  document.getElementById(\"app\")!.innerHTML = \"<vue-js message=\\\"Hello Vue.js\\\"></vue-js>\"\n})\n\n</script>\n\n<template>\n  <div id=\"app\"></div>\n</template>\n\n```",
          "zh-CN": "你听说过 `Web Components` 吗 ? \n\nVue 能很好地解析和创建 `Web Components` 。\n\n在这个挑战中，我们将尝试了解它，让我们开始吧 👇: \n\n```vue\n<script setup lang='ts'>\n\nimport { onMounted } from \"vue\"\n\n/**\n * 实现以下代码创建一个自定义元素.\n * 确保页面输出 \"Hello Vue.js\".\n*/\nconst VueJs = \"???\"\n\nonMounted(() => {\n  document.getElementById(\"app\")!.innerHTML = \"<vue-js message=\\\"Hello Vue.js\\\"></vue-js>\"\n})\n\n</script>\n\n<template>\n  <div id=\"app\"></div>\n</template>\n\n```"
        },
        "info": {
          "en": {
            "title": "custom element",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            },
            "difficulty": "hard",
            "tags": "Web Components"
          },
          "zh-CN": {
            "title": "自定义元素",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            }
          }
        }
      },
      {
        "path": "23-custom-ref",
        "quizLink": "https://sfc.vuejs.org/#eNpdUMFqAjEU/JUhJ12sKz2WVSj00kMvPecS43M3mE1C8qIV8d/7VlsQD4HMm/eGmbmo95SWx0rqTXXFZpcYhbimjQ5uTDEzLjgZtgOu2Oc4QivZ1koHHdqm0QENPsfkaaTA4IGwr8Gyi8I3rQ7/CLXQB22jQNp90352NL7SAjvy5ow1XlerOS6T6lUHG0MRMfphYZ4PtRrI+6jV/NHDlzkQSs1082CN91tjD4jBn9ETF3B2fU+ZdjKzhNNAAWL5NhmrZycZwG6kAhdgYCmzkd80ipXvaW5NzCZjC9wTzLHeTL6ByXT0tPSx/6Mki7yuvfcqjQpgkrIMkyCgcyFVxvFljNLDWqtJWSu0wnbtw6q6/gLrIZZB",
        "no": 23,
        "readme": {
          "en": "The `debounce function` is so useful in the input box manipulation scenarios.\n\nA `debounced ref` is even more flexible in `Vue.js`. Lets go 👇: \n\n```vue\n<script setup>\nimport { watch } from \"vue\"\n\n/**\n * Implement the function\n*/\nfunction useDebouncedRef(value, delay = 200) {\n\n}\nconst text = useDebouncedRef(\"hello\")\n\n/**\n * Make sure the callback only gets triggered once when entered multiple times in a certain timeout\n*/\nwatch(text, (value) => {\n  console.log(value)\n})\n</script>\n\n<template>\n  <input v-model=\"text\" />\n</template>\n\n```",
          "zh-CN": "防抖函数在输入框操作场景中非常有用。\n\n一个 防抖的`ref`在`Vue.js`更加灵活，让我们开始吧 👇: \n\n```vue\n<script setup>\nimport { watch } from \"vue\"\n\n/**\n * 补全以下函数来实现防抖ref :\n*/\nfunction useDebouncedRef(value, delay = 200) {\n\n}\nconst text = useDebouncedRef(\"hello\")\n\n/**\n * 确保在输入框快速输入时, 只触发一次回调。\n*/\nwatch(text, (value) => {\n  console.log(value)\n})\n</script>\n\n<template>\n  <input v-model=\"text\" />\n</template>\n\n```"
        },
        "info": {
          "en": {
            "title": "custom ref",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            },
            "difficulty": "hard",
            "tags": "Composition API,Reactivity:Advanced"
          },
          "zh-CN": {
            "title": "自定义ref",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            }
          }
        }
      },
      {
        "path": "24-v-active-style",
        "quizLink": "https://sfc.vuejs.org/#eNpdUctO6zAQ/ZWjbNJULrnvi6oEwZIFKxAbjERIp61Vx44cJ4Ci/DtjpwXEJrE9x+flMblq27Ohp2SdFF3tVOvRke9b6MrsytR36YU00qimtc5jhKMtJmydbSATvieTMM6XS2mwxHXTamrIePg9oe47z7iNclR7NVCE3FQHQtc7ihCtOg/lqYGnV4/aautQ71mbOnjLchu87MlE8JO3u52mu+r5CSqMw24TWKVZ5tLU1jDb/VUUu/VvmlBiDP6m8JnHUbHEw0+BXwK/Bf4I/BX4J/Bf4PzxBKsiCUsxljMvfmTSbHvDp5bNnHwslNnQ6xqmb57JZUEMn1fPhkr3wUNEHV0U+VxzrLXg5K2uPPEOKHod/7zSal4Aw2prXSmTRWhJRKaMCWOOUP6MWh/ojUGz0MfpsJq9rLpQBs8fxjRWnK5TbjadxCJDefE1bHl0+/jJcllrVR/49rfY2QlyNA2M4/yWEyeNMXKt5mR5jFbkX/Im0zvyAtK9",
        "no": 24,
        "readme": {
          "en": "For this challenge, we're going to implement an active-style-directive. Lets go 👇: \n\n```vue\n<script setup lang='ts'>\n\nimport { ref } from \"vue\"\n\n/**\n * Implement the custom directive\n * Make sure the list item text color changes to red when the `toggleTab` is toggled\n *\n*/\nconst VActiveStyle = {\n\n}\n\nconst list = [1, 2, 3, 4, 5, 6, 7, 8]\nconst activeTab = ref(0)\nfunction toggleTab(index: number) {\n  activeTab.value = index\n}\n\n</script>\n\n<template>\n  <ul>\n    <li\n      v-for=\"(item,index) in list\"\n      :key=\"index\"\n      v-active-style=\"[{'color':'red'},() => activeTab === index]\"\n      @click=\"toggleTab(index)\"\n    >\n      {{ item }}\n    </li>\n  </ul>\n</template>\n\n```",
          "zh-CN": "在这个挑战中，我们将实现一个\"激活的样式\"指令，让我们开始吧 👇: \n\n```vue\n<script setup lang='ts'>\n\nimport { ref } from \"vue\"\n\n/**\n * 实现该指令 :\n * 当切换该选项卡时，列表项文本颜色变为红色\n * \n*/\nconst VActiveStyle = {\n\n}\n\nconst list = [1, 2, 3, 4, 5, 6, 7, 8]\nconst activeTab = ref(0)\nfunction toggleTab(index: number) {\n  activeTab.value = index\n}\n\n</script>\n\n<template>\n  <ul>\n    <li\n      v-for=\"(item,index) in list\"\n      :key=\"index\"\n      v-active-style=\"[{'color':'red'},() => activeTab === index]\"\n      @click=\"toggleTab(index)\"\n    >\n      {{ item }}\n    </li>\n  </ul>\n</template>\n\n```"
        },
        "info": {
          "en": {
            "title": "v-active-style",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            },
            "difficulty": "hard",
            "tags": "Directives"
          },
          "zh-CN": {
            "title": "激活的样式-指令",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            }
          }
        }
      },
      {
        "path": "26-v-model",
        "quizLink": "https://sfc.vuejs.org/#eNpNT7tuwzAM/BVCS1oDjvfCLlB0aYeiWyYtqk0nKiRKkCingeF/LxUvWQiQ9+Ddqt5iPC4F1Yvq85hsZMjIJYIzdB4OnA+vmjRZH0NiWCHhDBvMKXjQSnRaVbhrGk3QwKePDj0Sg4GxZBbWZBOObBe8E94TGkZB+Rraq7nBj6XJ0hkCyXEOyYOlWBhw96kiTU2naQyUGU7fl68woYMB1vp4q2OHFuMKyl0SPmn1gc4FOBU8/matniut7/aC90I9o2SVLLIB9PvTpQ2X1lf/QcpVP62AbxFlZfxj2Trh992DWG3/u8pxLg==",
        "no": 26,
        "readme": {
          "en": "For this challenge, we're going to implement a simple `v-model` directive. Lets go 👇: \n\n```vue\n<script setup lang='ts'>\n\nimport { ref } from \"vue\"\n\n/**\n * Implement a custom directive\n * Create a two-way binding on a form input element\n *\n*/\nconst VOhModel = {\n\n}\n\nconst value = ref(\"Hello Vue.js\")\n\n</script>\n\n<template>\n  <input v-oh-model=\"value\" type=\"text\" />\n</template>\n\n```",
          "zh-CN": "在这个挑战中，我们将尝试实现一个简单的`v-model`指令，让我们开始吧 👇: \n\n```vue\n<script setup lang='ts'>\n\nimport { ref } from \"vue\"\n\n/**\n * 实现以下自定义指令\n * 在表单输入元素和数据间创建双向绑定\n *\n*/\nconst VOhModel = {\n\n}\n\nconst value = ref(\"Hello Vue.js\")\n\n</script>\n\n<template>\n  <input v-oh-model=\"value\" type=\"text\" />\n</template>\n\n```"
        },
        "info": {
          "en": {
            "title": "v-model",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            },
            "difficulty": "hard",
            "tags": "Directives"
          },
          "zh-CN": {
            "title": "实现简易版`v-model`指令",
            "author": {
              "name": "webfansplz",
              "github": "webfansplz"
            }
          }
        }
      }
    ]
  }
}
